{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Authors: Andy Bunn , Ed Cook, Kevin Anchukaitis ,  Tyson Lee Swetnam </p> <p>Developers: Ifeoluwa Ale , Michele Cosi </p> <p></p>"},{"location":"#welcome","title":"Welcome","text":"<p>Welcome to openDendro, the home of an open-source framework for the essential analytic software used in dendrochronology. Our aims are to provide researchers working with tree-ring data the necessary tools in open-source environments, and to promote open science practices and enhance the rigor and transparency in dendrochronological research.</p> <p>At openDendro, we recognize the importance of the foundational scientific software in advancing knowledge, enabling collaboration, ensuring reproducibility, and contributing to the collective progress of the dendrochronology community. </p> <p>Our framework seamlessly integrates with popular programming languages R and Python with public research data. We work to accommodate diverse researchers' preferences and workflows while embracing FAIR, CARE, and TRUST data principles in the effort to foster innovation and facilitate the sharing of knowledge within the field of dendrochronology and its many trans-disciplinary applications.</p> <p></p>"},{"location":"#history-and-motivation","title":"History and Motivation","text":"<p>For decades, much of the software used in dendrochronology has been in legacy programming languages which have been maintained by a small number of volunteers. These codebases are at risk of becoming inoperable or incompatible as advances in computing architecture accelerate. This is colloquially known as the \"Some random person in Nebraska\" problem in homage to a cartoon from xckd. And that random person is Ed Cook of course.</p> <p></p> <p>Our motivation with this project is to develop and foster a community of developers to maintain and build open-source software that will be usable by researchers who use tree-ring data. Modernizing and enhancing this software will also extend both their reach and utility beyond the dendrochronology community and allow integration into related initiatives in the atmospheric and earth sciences. We hope that making these tools open source will also facilitate further collaborative development, broaden the responsibility for collective maintenance and enhancement of this software, and ensure the persistence of these  tools. </p>"},{"location":"#why-write-code","title":"Why Write Code?","text":"<p>Writing code in languages like Python or R makes reproducible science easier compared to GUI-based analysis. Scripting offers transparency, automation, replication, portability, extensibility, and version control, which enhance reproducibility in scientific research.</p> <ul> <li> <p>Transparency and Documentation: Scripts are plain-text files that document the analysis workflow, making it easier for other researchers to understand and reproduce the analysis. GUI-based analysis lacks clear documentation of the steps and parameters used.</p> </li> <li> <p>Automation and Efficiency: Scripts automate repetitive tasks, saving time and reducing human errors. Code snippets, functions, and libraries can be reused across multiple datasets or scenarios, ensuring efficient and consistent analysis.</p> </li> <li> <p>Replication: Scripts facilitate straightforward replication of analyses. Other researchers can run the script on their own machines with the same input data and obtain identical results. GUI-based analysis often requires recreating specific interactions and settings, which is error-prone and time-consuming.</p> </li> <li> <p>Portability and Compatibility: Scripts in Python or R are portable and can run on different platforms without significant modifications. GUI-based tools may have platform-specific dependencies or version requirements, limiting their portability and compatibility.</p> </li> <li> <p>Extensibility and Flexibility: Scripting languages provide a wide range of libraries, packages, and modules, enabling advanced analyses, integration with external tools, and customization. GUI-based tools often have limited built-in functionality, making extension and adaptation challenging.</p> </li> <li> <p>Version Control: Scripts can easily integrate with version control systems like Git, allowing researchers to track changes, collaborate, and maintain an analysis history. Version control enhances transparency and ensures reproducibility.</p> </li> </ul> <p>By leveraging scripting and sharing code, researchers can promote collaboration, verification, and efficient building upon each other's work in scientific research.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Jump into the codebases and our apps.</p> <ul> <li>dplPy</li> <li>dplR</li> <li>Apps</li> </ul>"},{"location":"#fair","title":"FAIR","text":"<p>The openDendro project is aligned with the FAIR data principles, emphasizing the Findability, Accessibility, Interoperability, and Reusability of research data. Our repository is designed to facilitate reproducible research, ensuring that data and software resources are organized, documented, and accessible. We prioritize interoperability, enabling seamless integration with existing tools and frameworks. By following open licensing and attribution practices, we promote the reusability of our resources, fostering replication, validation, and extension of research findings. Join us in our commitment to FAIR principles and advancing dendrochronology with open and transparent practices.</p>"},{"location":"apps/","title":"Shiny Apps","text":"<p>In general, the tools at openDendro are meant to be used in a scripting environment which makes analysis easier to reproduce. However, some tasks are better done interactively. Two very common tasks in dendrochronology that benefit from a dynamic graphical environment are crossdating and detrending.</p> <p>In keeping with the rationale of openDendro, the entire workflow of these Shiny apps can be exported to an R script for reproducibility.</p>"},{"location":"apps/#xdater","title":"xDater","text":"<p><code>xDateR</code> is a Shiny app for graphically and statistically crossdating tree-ring data using <code>dplR</code>. </p> <p><code>xDateR</code> produces many of the diagnostics and tables that users of COFECHA will be familiar with. </p> <p>It can be launched in a browser using the link above or run on your local machine in <code>R</code> via:</p> <p><pre><code>install.packages(\"shiny\") # if not already installed\nlibrary(shiny)\nrunGitHub(\"xDater\", \"opendendro\",ref = \"main\")\n</code></pre> The source code is on GitHub. </p>"},{"location":"apps/#idetrend","title":"iDetrend","text":"<p><code>iDetrend</code> is a Shiny app for interactively detrending tree-ring data using <code>dplR</code>. </p> <p>It can be launched in a browser using the link above or run on your local machine in <code>R</code> via:</p> <p><pre><code>install.packages(\"shiny\") # if not already installed\nlibrary(shiny)\nrunGitHub(\"iDetrend\", \"opendendro\",ref = \"main\")\n</code></pre> The source code is on GitHub. </p>"},{"location":"apps/#treesong","title":"treeSong","text":"<p>An aspect of openDendro involves understanding, interpretation, and communication of scientific information in non-traditional ways including data visualization, sonification, and using generative art.</p> <p>Non-traditional approaches to scientific data, such as visualization, sonification, and generative art, provide benefits in understanding, communication, and exploration. These approaches offer alternative perspectives, making patterns and relationships more apparent, engaging a wider audience, and fostering deeper comprehension. By incorporating multiple senses, they enhance data exploration and help identify anomalies or patterns that traditional methods may miss. Non-traditional approaches encourage creativity, interdisciplinary connections, and innovative insights, pushing the boundaries of scientific understanding and facilitating novel discoveries.</p> <p><code>treeSong</code> is a Shiny app for converting the spectral properties of tree-ring data into audio.</p> <p>Because <code>treeSong</code> plays sounds, the best way to run it is to install in locally and run it in an R session:</p> <pre><code>install.packages(\"shiny\") # if not already installed\nlibrary(shiny)\nrunGitHub(\"treeSong\", \"opendendro\",ref = \"main\")\n</code></pre> <p>The source code is on GitHub. </p>"},{"location":"bootcamp/","title":"Bootcamp","text":"<p>Register Now!</p> <p>openDendro Bootcamp</p> <p>Jan 8<sup>th</sup>-9<sup>th</sup> 2024</p> <p>Laboratory of Tree-Ring Research</p> <p> University of Arizona</p>"},{"location":"bootcamp/#announcement","title":"\ud83d\udce2 Announcement","text":"<p>We are pleased to announce a comprehensive two-day bootcamp focused on openDendro. This event will provide participants with valuable hands-on training in the R and Python programming languages, using openDendro for analysis in dendrochronology.</p>"},{"location":"bootcamp/#about-opendendro","title":"\ud83c\udf32 About openDendro","text":"<p>openDendro is an open-source framework for software tools used in dendrochronology. Developed to promote open-science practices, openDendro offers researchers a unified and curated collection of tools in both R and Python environments. By leveraging open-source technologies, openDendro facilitates greater rigor and transparency in dendrochronological research, fostering collaboration and advancement in the field.</p>"},{"location":"bootcamp/#highlights","title":"\u2728 Highlights","text":"<p>Over the course of two days, participants will have the opportunity to engage in hands-on training with openDendro, gaining practical experience in both R and Python. The bootcamp will cover a range of topics, including:</p> <ul> <li>\ud83c\udf33 Using openDendro's core analytic software tools</li> <li>\ud83d\udd27 Hands-on exercises and case studies</li> <li>\ud83d\udcda Best practices for implementing open-science methodologies</li> <li>\ud83d\udd04 Navigating between R and Python environments</li> </ul>"},{"location":"bootcamp/#format","title":"\ud83d\udccb Format","text":"<p>The bootcamp will primarily be focused on in-person interaction, with morning and afternoon sessions dedicated to hands-on coding activities. Rather than lengthy lecture-style presentations, the emphasis will be on practical application and collaborative problem-solving. This format allows participants to actively engage with the material, reinforce their understanding through practical exercises, and work together with instructors and peers to tackle coding challenges.</p> <p>While the bootcamp prioritizes in-person engagement, we also understand the need for flexibility. Thus, we will include a modest online component to enhance the learning experience. This component might offer pre-bootcamp materials, supplementary resources, post-bootcamp support, and facilitatation of ongoing discussion and knowledge sharing. However, please note that the in-person sessions are essential for the immersive experience we aim to provide, and the online component is designed to complement rather than replace direct interaction.</p>"},{"location":"bootcamp/#who-should-attend","title":"\ud83d\udcbc Who Should Attend?","text":"<p>This bootcamp is designed for researchers, scientists, and practitioners who work with tree-ring data. Whether you are a beginner or an experienced coder you will leave with a better toolbox.</p>"},{"location":"bootcamp/#registration","title":"\ud83c\udf9f\ufe0f Registration","text":"<p>Please visit the registration website and complete the form. Please note that spaces are limited, so early registration is encouraged.</p>"},{"location":"bootcamp/#scholarships","title":"\ud83d\udcb0 Scholarships","text":"<p>We are pleased to offer limited support for student and early-career researchers by providing funds to help defray expenses associated with the bootcamp. Details on eligibility and the application process can be found on the registration page.</p>"},{"location":"cloud/","title":"Overview","text":"<p>Working in the Cloud is Accessible, Scalable, and Collaborative. </p> <p>In the ever-evolving landscape of research software, the shift towards cloud computing has transformed the way users approach their tasks, from word processing to complex scientific analyses. At openDendro, we understand the importance of embracing this trend, which is why we are thrilled to introduce cloud deployment for our suite of tools.</p>"},{"location":"cloud/#why","title":"Why?","text":"<p>Improved Accessibility: With openDendro in the cloud, you can access our powerful tools from anywhere using just a web browser. No more worrying about software installations or compatibility issues. Whether you're in the field, at the office, or working from home, openDendro is readily accessible.</p> <p>Effortless Collaboration: Cloud deployment makes collaboration a breeze. Share access to the cloud-based openDendro environment with your colleagues, allowing for seamless teamwork, shared analysis workflows, and efficient communication. Together, you can achieve more and make progress in your dendrochronology projects.</p> <p>Scalable Performance: The cloud offers scalability to handle diverse computational tasks. Scale your resources up or down based on your specific needs, ensuring optimal performance and reducing processing time. OpenDendro in the cloud accommodates data sets of varying sizes and complexity.</p>"},{"location":"cloud/#getting-started","title":"Getting Started","text":"<ul> <li> <p>CyVerse</p> </li> <li> <p>Docker</p> </li> </ul>"},{"location":"code/","title":"Overview","text":"<p>OpenDendro features the comprehensive set of tools of the Dendrochronology Program Library (<code>dpl</code>) created by Richard Holmes, the late research software engineer from the University of Arizona's Laboratory of Tree Ring Research who harnessed the quantitative potential of dendrochronology in the 1980s and early-1990s. </p> <p>OpenDendro offers equivalent functionality of <code>dpl</code> through the <code>dplpy</code> library for Python and <code>dplR</code> library for R. </p> <p>These libraries also incorporate various tools found in Ed Cook's ARSTAN program suite. </p> <p>Cook's groundbreaking work in the development and maintenance of ARSTAN has been instrumental in propelling dendrochronology forward, and without it, progress in the field would have been significantly hindered.</p> <ul> <li>dplPy</li> <li>dplR</li> </ul> <p>To facilitate accessibility, we have made the source code of ARSTAN and other programs written in the FORTRAN programming language available for interested researchers. </p> <ul> <li>FORTRAN</li> </ul> <p>Additionally, we have developed a selection of user-friendly  Apps for tree-ring analysis, which are based on the <code>dplR</code> library. These apps provide a more streamlined experience for specific applications within dendrochronology.</p>"},{"location":"contribute/","title":"Get Involved","text":"<p>Community support and participation are vital for open-source projects like openDendro. These projects rely on individuals who generously contribute their time and knowledge to make them successful. By getting involved as a tester or developer, you play a vital role in ensuring the growth and sustainability of openDendro. Your contributions help create a collaborative environment where researchers can benefit from innovative tools and shared expertise. Together, we can foster a vibrant community that pushes the boundaries of tree-ring analysis and promotes knowledge sharing. Join us today in supporting openDendro and making a difference in the field!</p>"},{"location":"contribute/#join-our-testing-team-for-opendendro-python-functions","title":"Join Our Testing Team for openDendro Python Functions!","text":"<p>Help us test and shape the future of openDendro's dplPy codebase. As a tester, you'll evaluate our Python functions for tree-ring analysis, ensuring their functionality and usability. Your feedback is vital in refining these cutting-edge tools, enhancing the user experience for researchers worldwide.</p> <p>Requirements:</p> <ul> <li>Familiarity with tree-ring analysis techniques (e.g., chronology building, detrending)</li> <li>Basic knowledge of Python programming</li> <li>Eagerness to break things</li> </ul> <p>Responsibilities:</p> <ul> <li>Test openDendro's Python functions, providing feedback on performance, accuracy, and usability</li> <li>Report bugs, issues, and suggestions for improvement</li> <li>Collaborate with the openDendro team, sharing insights and experiences</li> </ul> <p>Benefits:</p> <ul> <li>Active contribution to advancing tree-ring analysis software</li> <li>Firsthand experience in testing and providing feedback for scientific tools</li> <li>Recognition for your contributions to openDendro</li> <li>Collaboration and networking opportunities with fellow testers and researchers</li> </ul> <p>Join us on this exciting journey as we enhance openDendro's capabilities. Shape the future of tree-ring analysis software by becoming a tester for our Python functions.</p> <p>To learn more, contact us at openDendro@gmail.com.</p>"},{"location":"contribute/#developers-wanted","title":"Developers Wanted","text":"<p>We are actively seeking experienced developers who program in either R or Python to join our team. As a developer at openDendro, you will have the opportunity to contribute to a cutting-edge open-source project that empowers researchers worldwide. Your expertise will directly impact the quality and accessibility of the software used in dendrochronology research.</p> <p>Requirements:</p> <ul> <li>Proficiency in either R or Python, with a strong understanding of best practices and conventions in software development.</li> <li>Working knowledge of tree-ring analysis techniques and familiarity with relevant libraries, packages, or algorithms commonly used in the field.</li> <li>Experience with open-source software development, collaboration tools (such as Git), and the principles of reproducible research.</li> <li>Excellent communication skills and the ability to work effectively as part of a diverse and globally distributed team.</li> </ul> <p>Responsibilities:</p> <ul> <li>Collaborate with the openDendro team to develop and maintain high-quality, open-source software for dendrochronology research.</li> <li>Contribute to the design, implementation, and testing of new features and enhancements in the openDendro framework.</li> <li>Participate in code reviews, provide constructive feedback, and help maintain code quality standards.</li> <li>Engage in discussions and problem-solving to address user needs and improve the functionality and usability of the software.</li> <li>Contribute to documentation efforts, including code documentation, tutorials, and user guides.</li> </ul> <p>Benefits:</p> <ul> <li>Gain hands-on experience in developing open-source software for dendrochronology, enhancing your professional portfolio.</li> <li>Collaborate with a global community of researchers and developers, fostering meaningful connections and knowledge sharing.</li> <li>Contribute to the advancement of scientific research by enabling open science practices and promoting transparency.</li> <li>Expand your skills and knowledge in tree-ring analysis, software development, and open-source tools. Make a tangible impact on the dendrochronology community, enabling researchers worldwide to conduct rigorous and reproducible analyses.</li> </ul> <p>To learn more, contact us at openDendro@gmail.com. Feel free to please include any relevant code samples or links to your GitHub profile or other relevant repositories. We look forward to hearing from you!</p>"},{"location":"cyverse/","title":"CyVerse","text":""},{"location":"cyverse/#about","title":"About","text":"<p>CyVerse is the largest ever investment in research cyberinfrastructure for the Life Sciences by the US National Science Foundation. </p> <p>CyVerse supports a wide array of cloud native scientific software including popular integrated development environments (IDE) preferred by R and Python users. </p>"},{"location":"cyverse/#interactive-applications","title":"Interactive Applications","text":"<p>IDE applications for running <code>dplR</code> or <code>dplPy</code> are hosted on the CyVerse.org Discovery Environment</p> <p>Create a basic (free) CyVerse account</p> CyVerse Learning Materials <p>CyVerse has many self-paced training materials to help you understand its user portal and data science workbench interfaces</p> <ul> <li>Homepage</li> <li>User Portal</li> <li>Discovery Environment </li> <li>User Documentation </li> </ul> App Launcher Base Maintainers :simple-rstudio: Rocker-Project  Project Jupyter"},{"location":"data/","title":"data","text":""},{"location":"docker/","title":"Docker","text":"<p>We use Docker to build our respective integrated development environments (IDE) for working with <code>dpl</code> software.</p> <p>RStudio containers are based on the Rocker R and RStudio builds. CyVerse rehosts the Rocker images in its data science workbench, the Discovery Environment.</p> <p>CyVerse container builds are maintained on a GitHub Organization, and hosted on its private Harbor Registry. </p> <p>JupyterLab containers are based on the Project Jupyter image stacks. </p>"},{"location":"docker/#testing","title":"Testing","text":"<p>Run Docker for testing the code with Jupyter Lab or RStudio-Server.</p> <p>Install the Docker Desktop for Windows or Mac OS X, or command line for Linux. </p> <p>Pull pre-existing Docker images for RStudio-Server or JupyterLab:</p> <pre><code>docker pull jupyter/datascience-notebook:latest\n</code></pre> <p>To run RStudio-Server (authentication user: <code>rstudio</code>, password: set it yourself below): <pre><code>$ git clone https://github.com/opendendro/dplPy\n$ cd dplPy\n$ docker run -it --rm -p 8787:8787 -e PASSWORD=new_password -v $PWD:/home/rstudio/dplPy -e REDIRECT_URL=http://localhost:8787 rocker/geospatial:latest\n</code></pre></p> <p>Open your browser and navigate to http://localhost:8787</p> <p>If you're running remotely, use the DNS of the virtual machine service with the <code>:8787</code> or allow it to open the tab for you, e.g., with CodeSpaces or GitPod. </p> <p>From the R Console:</p> <pre><code>&gt; install.packages(\"dplR\", dependencies=TRUE)\n</code></pre> <p>The Project Jupyter DataScience Notebook runs both Python and R:</p> <pre><code>$ git clone https://github.com/opendendro/dplPy\n$ cd dplPy\n$ docker run -it --rm -p 8888:8888 -v $PWD:/home/jovyan/dplPy -e REDIRECT_URL=http://localhost:8888 jupyter/datascience-notebook:latest jupyter lab --no-browser --NotebookApp.token=''\n</code></pre> <p>Open your browser and navigate to http://localhost:8888</p> <ul> <li>Note: that we're disabling the Notebook Token so you don't have to authenticate; remove <code>--NotebookApp.token=''</code> to re-enable.</li> </ul>"},{"location":"dplpy-man/","title":"<code>dplpy</code> User Manual","text":"<p>Welcome to the <code>dplpy</code> user manual</p> <p>Here is a list of functions (in alphabetical order) with descriptions:</p> Function Description <code>ar_func</code> Fits series to autoregressive (AR) models and related functions <code>autoreg</code> Fits series to autoregressive (AR) models and related functions <code>chron</code> Creates a mean value chronology for a dataset, typically the ring width indices of a detrended series <code>detrend</code> Detrends a given series or data frame, first by fitting data to curve(s), with spline(s) as the default, and then by calculating residuals or differences compared to the original data. <code>help</code> Displays help (alpha). <code>plot</code> Generates line, spaghetti or segment plots. <code>rbar</code> Finds best interval of overlapping series over a  period of years, and calculating rbar constant for a dataset over period of overlap. <code>readers</code> Reads data from supported file types (*.CSV and *.RWL) and stores them in dataframe. <code>readme</code> Goes to this website. <code>report</code> Generates a report about absent rings in the data set. <code>series_corr</code> Crossdating function that focuses on the comparison of one series to the master chronology. <code>stats</code> Generates summary statistics for RWL and CSV format files. <code>summary</code> Generates a summary for RWL and CSV format files. <code>xdate</code> Crossdating function for dplPy loaded datasets."},{"location":"dplpy-man/#ar_func","title":"<code>ar_func</code>","text":"<p>Summary</p> <p>Main function for autoregressive (AR) modeling. </p> <p>Returns residuals and mean of best AR fit with specified lag.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : <code>str</code> - a data file (<code>.CSV</code> or <code>.RWL</code>) or a pandas dataframe imported from <code>dpl.readers()</code>.</p> </li> <li> <p><code>series</code> : <code>str</code> - an individual series within a chronology <code>data</code> file.</p> </li> <li> <p><code>lag</code> : <code>int</code> default <code>5</code> - nuber of years.</p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.ar_func(&lt;data&gt;[\"&lt;series&gt;\"], &lt;lag number&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; dpl.ar_func(ca533[\"CAM191\"], 10) \n</code></pre> <p>In the above example, we use dataset look at dataset <code>ca533</code> series <code>CAM191</code>  and specified a lag of <code>10</code>.</p> Returns <p>Users can expect an array of <code>residuals</code> + <code>mean</code> for selected series. </p> <p>The expected output from the example above will look similar to this: <pre><code>array([ 0.71130658, -0.23204695,  0.52121028,  0.57597523,  0.90108448,\n        0.20495808, -0.23457629,  0.58819405,  0.66478718,  0.47521983,\n        0.92695177, -0.35659493,  0.42220031, -0.19197698, -0.08828572,\n        0.5320343 ,  0.28471761,  0.39486259,  0.10748019,  0.25214937,\n        0.46500727,  1.45016901,  0.28605889,  0.29470389,  0.34120629,\n    -0.31249819,  0.42380461,  0.23473108, -0.06796468,  0.38897624,\n        0.68666198,  0.77677716,  0.62360082,  0.43398575,  0.74032758,\n        0.5880663 ,  0.20567916,  0.23525549,  0.63297387,  0.94101874,\n        0.06615244,  0.73838454,  0.51092414,  0.25087689,  0.3873105 ,\n        0.48383716,  0.28317419,  0.46750972,  0.60187677,  0.40542752,\n        0.54822178,  0.08560112,  0.26122762,  0.13318504,  0.25876284,\n        0.56315817,  0.40823334,  0.36114307,  0.49613157,  0.4169329 ,\n        0.40733772,  0.25578201,  0.42718681,  0.59555259, -0.21075308,\n        0.11587297,  0.62082607,  0.65467697, -0.17674732,  0.56107325,\n        0.51825623,  0.58111792,  0.61318262,  0.3742455 ,  0.07211766,\n        0.01136486,  0.06596661,  0.32254786,  0.39898574,  0.22616678,\n        0.34727753,  0.42409955,  0.51594014,  0.23294973,  0.50911683,\n        0.84802911,  0.48218982,  0.393356  ,  0.22153173,  0.65209051,\n        0.48231136,  0.19053267,  0.39660363,  0.39800466,  0.29138228,\n    -0.030384  ,  0.49157549,  0.49579055,  0.25640508,  0.48196172,\n        0.28278419,  0.53502938,  0.41559126,  0.34577752,  0.33023954,\n        0.55383387,  0.4391052 ,  0.35063736,  0.20157626,  0.25298519,\n        0.51312838,  0.53184596,  0.43997298,  0.27903576,  0.43143646,\n        0.45186539,  0.3734363 ,  0.41050279,  0.67168476,  0.31693981,\n        0.32281309,  0.5155617 ,  0.51985799,  0.48651392,  0.50650445,\n...\n        0.39541278,  0.47066705,  0.34558178,  0.46008747,  0.34158785,\n        0.3672973 ,  0.37749446,  0.34939726,  0.37388067,  0.4241256 ,\n        0.23815543,  0.29207569,  0.47247813,  0.44170539,  0.4410876 ,\n        0.4007522 ,  0.29655365,  0.38460918,  0.39774193,  0.42761775,\n        0.38384653])\n</code></pre></p>"},{"location":"dplpy-man/#autoreg","title":"<code>autoreg</code>","text":"<p>Summary</p> <p>Secondary function for AR modeling. Returns parameters of best fit AR model with specified lag. </p> <p>Best AR model is selected based on AIC value.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : <code>str</code> - a data file (<code>.CSV</code> or <code>.RWL</code>) or a pandas dataframe imported from <code>dpl.readers()</code>.</p> </li> <li> <p><code>series</code> : <code>str</code> - an individual series within a chronology <code>data</code> file.</p> </li> <li> <p><code>lag</code> : <code>int</code> default <code>5</code> - nuber of years.</p> </li> </ul> <p>Note</p> <p>This function and its outputs are integrated in the <code>ar_func</code> function.</p> <p>Examples</p> <pre><code>&gt;&gt;&gt; import dplpy as dpl \n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/ca533.csv\")\n&gt;&gt;&gt; dpl.autoreg(data['series name']) -&gt; returns parameters of best fit AR model\n                                        with maxlag of 5 (default) or other \n                                        specified number\n</code></pre> <pre><code>dpl.autoreg(ca533[\"CAM191\"], 10)\n</code></pre> Returns <p>A table listing autoregressive paramenters for the specified series;</p> <p>The expected output from the example above will look similar to this: <pre><code>const         0.022210\nCAM191.L1     0.503373\nCAM191.L2     0.087230\nCAM191.L3     0.143716\nCAM191.L4     0.020119\nCAM191.L5    -0.027769\nCAM191.L6    -0.010029\nCAM191.L7     0.001373\nCAM191.L8     0.025588\nCAM191.L9     0.042340\nCAM191.L10    0.136916\ndtype: float64\n</code></pre></p>"},{"location":"dplpy-man/#chron","title":"<code>chron</code>","text":"<p>Summary</p> <p>Creates a mean value chronology for a dataset, typically the ring width indices of a detrended series. Takes three optional arguments <code>biweight</code>, <code>prewhiten</code>, and <code>plot</code>. They determine whether to find means using Tukey's bi-weight robust mean (default True), whether to prewhiten data by fitting to an AR model (default False), and whether to plot the results of the chronology (default True).</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>biweight</code> : <code>boolean</code>, default <code>True</code> - use Tukey's bi-weight robust mean   </p> </li> <li> <p><code>prewhiten</code> : <code>boolean</code>, default <code>False</code> - run pre-whitening on the time series</p> </li> <li> <p><code>plot</code> : <code>boolean</code>, default <code>True</code> - plot the results    </p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.chron(&lt;data&gt;, prewhiten=&lt;True/False&gt;, biweight=&lt;True/False&gt;, plot=&lt;True/False&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; import dplpy as dpl \n&gt;&gt;&gt; ca533 = dpl.readers(\"../tests/data/csv/ca533.csv\")\n\n# Detrending data first\n&gt;&gt;&gt; rwi_ca533 = dpl.detrend(ca533)\n\n# Creating chronology using detrended data \n&gt;&gt;&gt; dpl.chron(rwi_ca533, prewhiten=False, biweight=True, plot=True)\n</code></pre> Returns <p>The expected output is the mean value chronology of a specific dataframe.</p> <p>The expected output from the example above will look similar to this:</p> <pre><code>        Mean RWI    Sample depth\nYear        \n626     0.371605    1\n627     0.284398    1\n628     0.306523    1\n629     0.416333    1\n630     0.482462    1\n...     ...         ...\n1979    1.053427    21\n1980    1.455353    21\n1981    1.252526    21\n1982    1.362244    21\n1983    1.314827    21\n1358 rows \u00d7 2 columns\n</code></pre> <p>If <code>plot=True</code> then a plot will also be generated:</p> <p></p>"},{"location":"dplpy-man/#detrend","title":"<code>detrend</code>","text":"<p>Summary</p> <p>Detrends a given series or dataframe, first by fitting data to curve(s), with <code>spline</code> as the default, and then by calculating residuals (default = <code>residual</code>) or differences (<code>difference</code>) compared to the original data. Other supported curve fitting methods are <code>ModNegex</code> (modified negative exponential), <code>Hugershoff</code>, <code>linear</code>, <code>horizontal</code>.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>series</code> : <code>str</code> - an individual series within a chronology <code>data</code> file.</p> </li> <li> <p><code>fit</code> : <code>str</code>, default <code>spline</code> - fitting method of curves, e.g., <code>horizontal</code>, <code>Hugershoff</code>, <code>linear</code>, <code>ModNegex</code> (modified negative exponential), and <code>spline</code>.</p> </li> <li> <p><code>method</code> : <code>str</code>, default <code>residual</code> - intercomparison method, options: <code>difference</code> or <code>residual</code>.</p> </li> <li> <p><code>plot</code> : <code>boolean</code>, default <code>True</code> - plot the results.</p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; import dplpy as dpl\n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.csv\")\n&gt;&gt;&gt; dpl.detrend(data)\n# Detrending a series part of the dataframe\n&gt;&gt;&gt; dpl.detrend(data[\"&lt;series&gt;\"])\n# Detrending function and its options\n&gt;&gt;&gt; dpl.detrend(data[\"&lt;series&gt;\"], fit=\"&lt;fitting method&gt;\", method=\"&lt;comparison method&gt;\", plot=&lt;True/False&gt;)    \n</code></pre> Returns <p>The expected output is the a list of detrended values (for the entire dataset or for a specific series)</p> <p>The expected output from the example above will look similar to this:</p> <pre><code>1180    1.180835\n1181    1.511543\n1182    1.870558\n1183    2.197630\n1184    1.815025\n        ...   \n1966    1.060515\n1967    1.209514\n1968    1.282459\n1969    1.392746\n1970    1.239629\nName: CAM191, Length: 791, dtype: float64\n</code></pre> <p>If <code>plot=True</code> then a plot will also be generated:</p> <p></p>"},{"location":"dplpy-man/#help","title":"<code>help</code>","text":"<p>Summary</p> <p>Python includes a built in <code>help()</code> functionality.</p> <p>Use <code>help()</code> to read the documentation for each <code>dplpy</code> function.</p> <p>Examples</p> <pre><code>&gt;&gt;&gt; help(dpl.readers)\n</code></pre>"},{"location":"dplpy-man/#plot","title":"<code>plot</code>","text":"<p>Summary</p> <p>Plots a given dataframe or series of a specific dataframe in either <code>line</code> (default), spaghetti (<code>spag</code>) or segment (<code>seg</code>) plots.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>series</code> : <code>str</code> - an individual series within a chronology <code>data</code> file.</p> </li> <li> <p><code>type</code> : <code>str</code> - type of plot to generate, e.g., <code>line</code>, spaghetti (<code>spag</code>), or segment (<code>seg</code>). default <code>line</code></p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.plot(&lt;data&gt;)\n# Plot series subset of dataframe with a specified plot type\n&gt;&gt;&gt; dpl.plot(&lt;data&gt;[\"&lt;series&gt;\"], type=&lt;plot type&gt;)\n</code></pre> Returns <p>A graph of the specified dataframe.</p> <p>From the example above, the expected output would look something similar to the below plot:</p> <p></p>"},{"location":"dplpy-man/#rbar","title":"<code>rbar</code>","text":"<p>Summary</p> <p>Finds best interval of overlapping series over a long period of years and calculates rbar constant for a dataset. Supports a number of rbar methods: <code>osborn</code>, <code>67spline</code>, <code>frank</code>.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>start</code> : <code>int</code> - start date year </p> </li> <li> <p><code>end</code> : <code>int</code> - end date year</p> </li> <li> <p><code>method</code> : <code>str</code> default <code>osborn</code> - rbar method, options <code>osborn</code>, <code>67spline</code>, <code>frank</code>.</p> </li> </ul> <p>Further development underway. Future versions to prioritize number of series, number of years or both. Current version attempts to do both.</p> <p>Examples</p> <pre><code># Detrend data\n&gt;&gt;&gt; rwi_data = dpl.detrend(&lt;data&gt;, plot=False)\n\n# Find common interval of detrended data\n&gt;&gt;&gt; start, end = dpl.common_interval(&lt;data&gt;)\n\n# Calculate rbar coonstant\n&gt;&gt;&gt; dpl.rbar(rwi_data, start, end, method=\"&lt;rbar method&gt;\")\n</code></pre> <p>Example:</p> <pre><code># Detrend data\n&gt;&gt;&gt; rwi_data = dpl.detrend(ca533, plot=False)\n\n# Find common interval of detrended data\n&gt;&gt;&gt; start, end = dpl.common_interval(ca533)\n\n# Calculate rbar coonstant using the interval calculated above and using the Osborn method\n&gt;&gt;&gt; dpl.rbar(rwi_data, start, end, method=\"osborn\")\n</code></pre> Returns <p><code>rbar</code> returns a list of constants to multiply with each mean value generated for a range of years from a mean value chronology.</p> <p>From the example above, the output is the following:</p> <pre><code>[0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n...\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766,\n0.44170725878965766]\n</code></pre>"},{"location":"dplpy-man/#readers","title":"<code>readers</code>","text":"<p>Summary</p> <p>This function imports common ring width data files (<code>.CSV</code>, <code>.RWL</code>) into Python as arrays</p> <p>Parameters</p> <ul> <li><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></li> </ul> <p>Supported data types</p> <pre><code>dplPy currently supports `csv` and `rwl` data formats.\n</code></pre> <p>Examples</p> <pre><code>&gt;&gt;&gt; import dplpy as dpl\n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.csv\")\n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.rwl\", header=True)\n</code></pre> Returns <ul> <li>A success message;</li> <li>A list of series within the data file such as the following:</li> </ul> <pre><code>Attempting to read input file: ca533.rwl as .rwl format\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['CAM011', 'CAM021', 'CAM031', 'CAM032', 'CAM041', 'CAM042', 'CAM051', 'CAM061', 'CAM062', 'CAM071', 'CAM072', 'CAM081', 'CAM082', 'CAM091', 'CAM092', 'CAM101', 'CAM102', 'CAM111', 'CAM112', 'CAM121', 'CAM122', 'CAM131', 'CAM132', 'CAM141', 'CAM151', 'CAM152', 'CAM161', 'CAM162', 'CAM171', 'CAM172', 'CAM181', 'CAM191', 'CAM201', 'CAM211'] \n</code></pre>"},{"location":"dplpy-man/#readme","title":"<code>readme</code>","text":"<p>Parameters</p> <p>The readme function opens the opendendro webpage.</p> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.readme()\n</code></pre> Returns <p>This website opens!</p>"},{"location":"dplpy-man/#report","title":"<code>report</code>","text":"<p>Summary</p> <p>Generates a report about the input dataset that includes:</p> <ul> <li>Number of dated series</li> <li>Number of measurements</li> <li>Avg series length (years)</li> <li>Range (total years)</li> <li>Span (start-end year)</li> <li>Mean (Standard Deviation) series intercorrelation</li> <li>Mean (Standard Deviation) AR1</li> <li>Years with absent rings listed by series</li> </ul> <p>Parameters</p> <ul> <li><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; import dplpy as dpl\n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.csv\")\n&gt;&gt;&gt; dpl.report(data) \n</code></pre> Returns <p>From the example above, the expected output is the following:</p> <pre><code>Number of dated series: 34\nNumber of measurements: 23276\nAvg series length: 684.5882\nRange: 1358\nSpan: 626 - 1983\nMean (Std dev) series intercorrelation:\nMean (Std dev) AR1: 0.7122\n-------------\nYears with absent rings listed by series\n\n    CAM011 -- 1753 1782\n    CAM031 -- 1497 1500 1523 1533 1540 1542 1545 1578 1579 1580 1655 1668 1670 1681\n    CAM032 -- 1497 1523 1579 1654 1670 1681 1782\n    CAM051 -- 1475\n    CAM061 -- 1497 1523 1542 1545 1547 1579 1654 1655 1668 1670 1672 1782 1858 1960\n    CAM062 -- 1542 1545 1547 1548 1579 1654 1655 1670 1672 1782 1836 1857 1858 1929\n    CAM071 -- 1269 1497 1498 1523 1542 1547 1578 1579 1612 1655 1656 1668 1670 1672 1674 1690 1707 1708 1756 1782 1795 1820 1836 1845 1857 1858 1924 1948 1960\n    CAM072 -- 1218 1497 1498 1523 1533 1538 1542 1545 1546 1547 1571 1579 1580 1590 1654 1655 1668 1670 1672 1675 1690\n    CAM081 -- 1218 1336\n    CAM082 -- 1362 1858 1865\n    CAM091 -- 1655 1669 1670 1782 1858\n    CAM092 -- 1624 1654 1655 1670 1672 1675 1677 1690 1703 1705 1707 1708 1710 1733 1753 1756 1757 1774 1777 1781 1782 1783 1784 1795 1807 1824 1829 1836 1845 1857 1858 1899 1904 1929 1936 1961\n    CAM101 -- 1782 1783 1899 1929\n    CAM102 -- 1669 1690 1782 1858 1899 1929\n    CAM111 -- 1542\n...\n    CAM201 -- 1523\n    CAM211 -- 645 762 809 847 924 957 1014 1118 1123 1133 1147 1189 1350 1384 1468 1571 1641\n-------------\n</code></pre>"},{"location":"dplpy-man/#series_corr","title":"<code>series_corr</code>","text":"<p>Summary</p> <p>Crossdating function that focuses on the comparison of one series to the master chronology.</p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>series</code> : <code>str</code> - an individual series within a chronology <code>data</code> file.</p> </li> <li> <p><code>prewhiten</code> : <code>boolean</code> default <code>False</code> - run pre-whitening on the time series, options: <code>True</code> or <code>False</code>.</p> </li> <li> <p><code>corr</code> : <code>str</code>, default <code>Spearman</code> - select correlation type if <code>prewhiten=True</code>, options: <code>Pearson</code> or <code>Spearman</code>.</p> </li> <li> <p><code>seg_length</code> :  <code>int</code> default <code>50</code> - segment length (years).</p> </li> <li> <p><code>bin_floor</code> : <code>int</code> default <code>100</code> - select bin size.</p> </li> <li> <p><code>p_val</code> : <code>double</code> default <code>0.05</code> - select a p-value, e.g., <code>0.05</code>, <code>0.01</code>, <code>0.001</code>.</p> </li> <li> <p><code>plot</code> :  <code>boolean</code> default <code>True</code> - plot the output.</p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.series_corr(ca533, \"CAM191\", prewhiten=False, corr=\"Pearson\", bin_floor=10)    \n</code></pre> Returns <p>Two graphs: the first graph showing the correlation of one series to against the master chronology in a line graph; the second graph supports the first, showing the correlation in segments. For the example above, the graphs are as following:</p> <p> </p>"},{"location":"dplpy-man/#stats","title":"<code>stats</code>","text":"<p>Summary</p> <p>Generates summary statistics for <code>rwl</code>  and <code>csv</code> format files. It outputs a table with <code>first</code>, <code>last</code>, <code>year</code>, <code>mean</code>, <code>median</code>, <code>stdev</code>, <code>skew</code>, <code>gini</code>, <code>ar1</code> for each series in data file.</p> <p>Parameters</p> <ul> <li><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; dpl.stats(&lt;data&gt;)\n</code></pre> <pre><code>&gt;&gt;&gt; dpl.stats(ca533)\n</code></pre> Returns <p>Table with <code>first</code>, <code>last</code>, <code>year</code>, <code>mean</code>, <code>median</code>, <code>stdev</code>, <code>skew</code>, <code>gini</code>, <code>ar1</code> for each series in data file. For the example above, the output table is the following:</p> <pre><code>    series  first   last    year    mean    median  stdev   skew    gini    ar1\n1   CAM011  1530    1983    454     0.440   0.40    0.222   1.029   0.273   0.698\n2   CAM021  1433    1983    551     0.424   0.40    0.185   0.946   0.237   0.702\n3   CAM031  1356    1983    628     0.349   0.29    0.214   0.690   0.341   0.809\n4   CAM032  1435    1983    549     0.293   0.26    0.163   0.717   0.309   0.665\n5   CAM041  1683    1983    301     0.526   0.53    0.223   0.488   0.238   0.710\n6   CAM042  1538    1983    446     0.439   0.36    0.348   3.678   0.324   0.881\n7   CAM051  1247    1983    737     0.273   0.25    0.140   1.836   0.262   0.705\n8   CAM061  1357    1983    627     0.462   0.47    0.202   -0.111  0.247   0.510\n9   CAM062  1525    1983    459     0.442   0.45    0.188   -0.266  0.240   0.529\n10  CAM071  1037    1983    947     0.249   0.25    0.109   0.027   0.247   0.578\n11  CAM072  1114    1983    870     0.309   0.29    0.163   0.698   0.292   0.735\n12  CAM081  1081    1983    903     0.327   0.31    0.124   0.555   0.211   0.723\n13  CAM082  977     1983    1007    0.285   0.29    0.114   0.312   0.223   0.771\n14  CAM091  1460    1983    524     0.532   0.52    0.255   0.425   0.267   0.632\n15  CAM092  1591    1983    393     0.349   0.34    0.226   0.337   0.369   0.561\n16  CAM101  1727    1983    257     0.568   0.56    0.260   0.254   0.259   0.716\n17  CAM102  1665    1983    319     0.604   0.62    0.261   0.082   0.243   0.677\n18  CAM111  1446    1983    538     0.625   0.62    0.249   0.196   0.225   0.625\n19  CAM112  1471    1983    513     0.570   0.56    0.211   0.223   0.207   0.583\n20  CAM121  1000    1983    984     0.259   0.26    0.106   0.042   0.231   0.594\n21  CAM122  1000    1983    984     0.271   0.27    0.109   0.346   0.223   0.653\n22  CAM131  695     1970    1276    0.552   0.53    0.198   0.330   0.202   0.788\n23  CAM132  710     1232    523     0.397   0.38    0.148   0.871   0.203   0.810\n24  CAM141  1030    1970    941     0.627   0.60    0.204   0.695   0.177   0.746\n25  CAM151  1222    1970    749     0.446   0.39    0.273   1.068   0.332   0.765\n26  CAM152  1221    1449    229     0.534   0.52    0.195   0.297   0.203   0.695\n27  CAM161  1106    1609    504     0.339   0.33    0.149   0.633   0.243   0.794\n28  CAM162  971     1970    1000    0.397   0.37    0.184   0.647   0.259   0.840\n29  CAM171  1213    1970    758     0.450   0.40    0.210   1.250   0.250   0.799\n30  CAM172  1174    1970    797     0.482   0.42    0.249   1.622   0.268   0.847\n31  CAM181  1190    1970    781     0.283   0.25    0.149   0.706   0.293   0.805\n32  CAM191  1180    1970    791     0.366   0.25    0.336   2.359   0.429   0.876\n33  CAM201  990     1582    593     0.474   0.47    0.181   0.772   0.208   0.709\n34  CAM211  626     1968    1343    0.357   0.34    0.182   0.513   0.286   0.683\n</code></pre>"},{"location":"dplpy-man/#summary","title":"<code>summary</code>","text":"<p>Summary</p> <p>The summary function generates a summary of each series recorded in <code>rwl</code>  and <code>csv</code> format files. It outputs a table with <code>count</code>, <code>mean</code>, <code>std</code>, <code>min</code>, <code>25%</code>, <code>50%</code>, <code>75%</code>, <code>max</code> for each series in data file.</p> <p>Parameters</p> <ul> <li><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; import dplpy as dpl\n&gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.csv\")\n&gt;&gt;&gt; dpl.summary(data)\n</code></pre> Returns <p>Summary outputs a table with <code>count</code>, <code>mean</code>, <code>std</code>, <code>min</code>, <code>25%</code>, <code>50%</code>, <code>75%</code>, <code>max</code> for each series in data file. For the example above, the output table is the following: <pre><code>        CAM011      CAM021      CAM031      CAM032      CAM041      CAM042      CAM051      CAM061      CAM062      CAM071      ... CAM151      CAM152      CAM161      CAM162      CAM171      CAM172      CAM181      CAM191      CAM201      CAM211\ncount   454.000000  551.000000  628.000000  549.000000  301.000000  446.000000  737.000000  627.000000  459.000000  947.000000  ... 749.000000  229.000000  504.000000  1000.000000 758.000000  797.000000  781.000000  791.000000  593.000000  1343.000000\nmean    0.439581    0.424465    0.349156    0.293224    0.525648    0.439148    0.273012    0.462281    0.441939    0.249071    ... 0.445648    0.533799    0.339464    0.396710    0.450264    0.482296    0.282638    0.366271    0.473929    0.356813\nstd     0.221801    0.185397    0.213666    0.162930    0.222568    0.347705    0.139691    0.201785    0.188389    0.109357    ... 0.272561    0.194947    0.148916    0.184057    0.209848    0.249002    0.148853    0.335788    0.180967    0.182086\nmin     0.000000    0.050000    0.000000    0.000000    0.100000    0.070000    0.000000    0.000000    0.000000    0.000000    ... 0.000000    0.060000    0.000000    0.000000    0.080000    0.080000    0.000000    0.000000    0.000000    0.000000\n25%     0.290000    0.290000    0.180000    0.180000    0.350000    0.270000    0.180000    0.335000    0.330000    0.180000    ... 0.240000    0.410000    0.230000    0.260000    0.300000    0.310000    0.170000    0.170000    0.350000    0.220000\n50%     0.400000    0.400000    0.290000    0.260000    0.530000    0.360000    0.250000    0.470000    0.450000    0.250000    ... 0.390000    0.520000    0.330000    0.370000    0.400000    0.420000    0.250000    0.250000    0.470000    0.340000\n75%     0.540000    0.520000    0.510000    0.390000    0.680000    0.460000    0.330000    0.600000    0.580000    0.320000    ... 0.610000    0.660000    0.430000    0.510000    0.580000    0.590000    0.380000    0.455000    0.580000    0.470000\nmax     1.360000    1.110000    1.030000    0.850000    1.380000    3.030000    1.320000    1.090000    0.920000    0.620000    ... 1.640000    1.250000    0.900000    1.040000    1.540000    1.980000    0.800000    2.540000    1.490000    1.100000\n</code></pre></p>"},{"location":"dplpy-man/#xdate","title":"<code>xdate</code>","text":"<p>Summary</p> <p>Crossdating function for dplPy datasets. </p> <p>Parameters</p> <ul> <li> <p><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></p> </li> <li> <p><code>prewhiten</code> : <code>boolean</code> default <code>True</code> - prewhiten series using AR modeling</p> </li> <li> <p><code>corr</code> : <code>str</code> default <code>Spearman</code> - correlation type, options: 'Pearson' or 'Spearman'</p> </li> <li> <p><code>slide_period</code> : <code>int</code> default <code>50</code> - period window (years)</p> </li> <li> <p><code>bin_floor</code> : <code>int</code> default <code>100</code> - bin size</p> </li> <li> <p><code>p_val</code> : <code>float</code> default <code>0.05</code> - p-value, options: '0.05', '0.01', '0.001'</p> </li> <li> <p><code>show_flags</code> : <code>boolean</code> default <code>True</code> - show flags in the output</p> </li> </ul> <p>Examples</p> <pre><code>&gt;&gt;&gt; ca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=False)\n# Crossdating of detrended data\n&gt;&gt;&gt; dpl.xdate(ca533_rwi, prewhiten=True, corr=\"Spearman\", slide_period=50, bin_floor=100, p_val=0.05, show_flags=True)\n</code></pre> Expected outputs <p>Outputs a dataframe of each series' segment correlations compared to the same segments in the master chronology.</p> <p>For the above example, the expect output dataframe is the following:</p> <pre><code>Flags for CAM011\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1900-1949    6 -0.03 -0.31  0.17 -0.17  0.03 -0.18 -0.15  0.09 -0.16  0.20  0.15 -0.08 -0.03  0.08  0.13 -0.06  0.30  0.20 -0.17  0.09 -0.04\n\nFlags for CAM051\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1375-1424    9 -0.02 -0.21  0.29  0.10 -0.09  0.06  0.30  0.09 -0.01 -0.03  0.18 -0.03 -0.16  0.24 -0.05 -0.06 -0.03  0.03 -0.11  0.38 -0.11\n\nFlags for CAM131\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1800-1849    0 -0.13 -0.13 -0.05  0.05  0.09 -0.03 -0.14 -0.16 -0.00 -0.25  0.13 -0.11  0.10 -0.15  0.01 -0.34  0.09 -0.01  0.09 -0.09  0.05\n\nFlags for CAM171\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1275-1324   -4 -0.04  0.00 -0.11  0.01 -0.05 -0.05  0.46  0.27 -0.13  0.02  0.28  0.23  0.01  0.20  0.12 -0.04  0.03 -0.14  0.01  0.01 -0.13\n\nFlags for CAM181\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1775-1824    8 -0.13  0.05  0.07 -0.06 -0.12  0.19  0.14 -0.36 -0.30  0.06  0.21 -0.02 -0.15  0.16  0.14 -0.05 -0.02 -0.01  0.31  0.05 -0.14\n\nFlags for CAM201\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1350-1399   -7 -0.04  0.03 -0.05  0.25 -0.08 -0.09 -0.13  0.01 -0.08  0.22  0.19  0.17 -0.13  0.13  0.09 -0.14 -0.26  0.03 -0.15 -0.14  0.12\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n1125-1174    1 -0.02 -0.03 -0.12 -0.17 -0.08  0.08  0.18  0.00  0.19 -0.27  0.28  0.39  0.12 -0.24  0.01 -0.06 -0.15 -0.00 -0.10 -0.14 -0.18\n...\n1000-1049   -1  0.04  0.07 -0.16 -0.06  0.09 -0.07 -0.24 -0.12 -0.04  0.45  0.30 -0.33 -0.14  0.06  0.18 -0.06 -0.27 -0.25  0.09  0.12  0.16\n1025-1074   -1  0.02 -0.19 -0.08 -0.08 -0.20 -0.09 -0.18 -0.18  0.19  0.70  0.36 -0.15 -0.01  0.08 -0.13 -0.34 -0.27 -0.14 -0.04  0.11  0.15\n\n# Dataframe is truncated for visualization purposes\n            CAM011      CAM021      CAM031      CAM032      CAM041      CAM042      CAM051      CAM061      CAM062      CAM071      ... CAM151      CAM152  CAM161  CAM162      CAM171      CAM172      CAM181      CAM191      CAM201  CAM211\n700-749     NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         ... NaN         NaN     NaN     NaN         NaN         NaN         NaN         NaN         NaN     0.402641\n725-774     NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         ... NaN         NaN     NaN     NaN         NaN         NaN         NaN         NaN         NaN     0.459880\n750-799     NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         NaN         ... NaN         NaN     NaN     NaN         NaN         NaN         NaN         NaN         NaN     0.303433\n1775-1824   0.482449    0.526435    0.294118    0.646002    0.451140    0.489364    0.455558    0.777575    0.862473    0.772677    ... 0.702473    NaN     NaN     0.484946    0.572821    0.578103    0.208547    0.764706    NaN     0.544202\n1800-1849   0.522305    0.456999    0.308715    0.568499    0.581273    0.485234    0.607107    0.790732    0.810612    0.761633    ... 0.782953    NaN     NaN     0.532389    0.523073    0.749052    0.256567    0.810900    NaN     0.568980\n1825-1874   0.545834    0.575606    0.546987    0.625834    0.655030    0.514622    0.572533    0.793421    0.747419    0.652533    ... 0.707275    NaN     NaN     0.494070    0.535942    0.700264    0.411092    0.736471    NaN     0.503770\n1850-1899   0.538631    0.738295    0.656855    0.714382    0.652629    0.655414    0.402929    0.859112    0.801489    0.674430    ... 0.692101    NaN     NaN     0.567827    0.538151    0.672989    0.513661    0.749436    NaN     0.660120\n1875-1924   0.302665    0.751164    0.533637    0.640816    0.461801    0.604994    0.425498    0.709196    0.716879    0.653493    ... 0.689508    NaN     NaN     0.717551    0.542185    0.692869    0.554094    0.679136    NaN     0.683361\n1900-1949   0.153806    0.700456    0.640816    0.696230    0.465738    0.728307    0.385162    0.647155    0.718703    0.493013    ... 0.730612    NaN     NaN     0.628523    0.575222    0.751068    0.423866    0.728307    NaN     0.566963\n1925-1974   0.288836    0.618439    0.560912    0.688547    0.509724    0.637935    0.354238    0.696711    0.813205    0.529220    ... NaN         NaN     NaN     NaN         NaN         NaN         NaN         NaN         NaN     NaN\n</code></pre>"},{"location":"dplpy-man/#xdate_plot","title":"<code>xdate_plot</code>","text":"<p>Summary </p> <p>Function is under construction</p> <p>Visualize crossdating function in plot form; Each segment correlation is color coded. </p> <p>Parameters</p> <ul> <li><code>data</code> : a pandas dataframe - a pandas dataframe imported from <code>dpl.readers()</code></li> </ul> <p>Examples</p> <pre><code>dpl.xdate_plot(&lt;data&gt;)\n</code></pre> <pre><code># Detrend data first\nca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=False)\n\n# Crossdating of detrended data\ndpl.xdate_plot(ca533_rwi)\n</code></pre> Returns <p>A graph showing segment correlations.</p> <p></p>"},{"location":"fortran/","title":"FORTRAN Programs","text":"<p>Lamont-Doherty Earth Observatory related software - https://www.geog.cam.ac.uk/research/projects/dendrosoftware/</p>"},{"location":"itrdb/","title":"International Tree Ring Databank","text":"<p>The International Tree Ring Databank </p>"},{"location":"python/","title":"dplpy","text":""},{"location":"python/#introduction","title":"Introduction","text":"<p>The <code>dplpy</code> library is hosted on Pypi  and can be run in any Python environment or Integrated Development Environment (IDE) including Jupyter Lab, RStudio, or VS Code. </p> <p>Functionally, <code>dplpy</code> is a Python implimentation of the <code>dplR</code> library. </p> <p>The <code>dplpy</code> library is intended to reproduce identical outputs as the <code>dplR</code> library when using any given dataset. </p>"},{"location":"python/#working-online","title":"Working Online","text":"<p>You can run <code>dplpy</code> in the cloud using the openDendro Hosted Apps on CyVerse.</p>"},{"location":"python/#installation","title":"Installation","text":""},{"location":"python/#stable-version","title":"Stable Version","text":"<p>Step 1: Ensure that you have Python version 3.11 or greater installed.</p> <p>Step 2: Install <code>pip</code></p> <p>Step 3: Install <code>dplpy</code> using <code>pip</code>:</p> <pre><code>pip install dplpy\n</code></pre> Installing  Python on your computer <p>We recommend using the  Anaconda package management software for Python. </p> <p>Anaconda comes with a Desktop interface that can help novice data scientists work with their installed packages and virtual environments.</p> <p>Anaconda uses a package manager called <code>conda</code> to install software libraries. <code>conda</code> can install both OS dependencies and Python packages. </p> <p><code>mamba</code> is a reimplementation of the <code>conda</code> package manager in C++. We frequently use of <code>mamba</code> instead of <code>conda</code> because of its faster package build speeds.</p> <p>For the command line savvy user,  Miniconda is suggested. </p> <p>Miniconda is a minimal installer that allows users to more selectively install only the packages they need using <code>conda</code>. </p> <p>We do not recommend using Homebrew if you are on macOS.</p> <p> <code>pip</code> is the default package installer for Python, enabling users to easily download and install additional packages from the \u2018Python Package Index\u2019 (PyPI). Pip will be installed automatically when you install Miniconda.</p> <p> Project Jupyter is an open-source platform that facilitates interactive computing by providing a web-based interface for creating and sharing documents containing live code. Jupyter comes installed with the full Anaconda installation, but must be added to Miniconda installs. </p>  Anaconda vs  Miniconda <p>Anaconda is a package management software that downloads a number of packages for data analysis and exploration \u2013 including base Python \u2013 with a total size of ~3GB. Since not all packages are always required, a \u201clite\u201d version of Anaconda is also available: Miniconda. </p> <p>Miniconda gives you base Python and allows for all Anaconda functions, but has a much smaller download size (~500MB) and installation time because it installs fewer packages. Once installed, both Anaconda or Miniconda will be referred to simply as <code>conda</code>.</p> I\u2019m on a Mac, why not use the pre-installed Python? <p>Mac OS X does come with a preinstalled version of Python (although typically lagging behind the latest version). However, it is used behind the scenes as part of the operating system, so modifying or updating this could have unintended consequences.  It is much safer to install a newer version from Anaconda or Miniconda as an environment.</p> Installing via Miniconda and Setting Up a <code>dplpy</code> environment <p>In order to set up your own environment, you will need to download Miniconda according to your OS. Please go to the following page and download and execute the correct file for your OS: https://docs.conda.io/projects/miniconda/en/latest/</p> Mac OS X <p>Downloading either the <code>bash</code> or <code>.pkg</code> version of Miniconda should yield the same result.</p> <p>Downloading the <code>.pkg</code> file will allow you to install Miniconda by clicking through an installer, whilst downloading the bash version will require you to execute the downloaded script in a Terminal.</p> Windows <p>Downloading the Miniconda installer will result in a command prompt named \u201cAnaconda\u201d. This is where you will be able to access all of your conda installations. Packages installed through the conda command prompt are NOT available in PowerShell and/or other installed shells (e.g., git shell).</p> <p>https://docs.anaconda.com/free/anaconda/getting-started/ is a great starting point for learning about conda!</p> <p>Conda is used exclusively through the command line, therefore you should be comfortable using the shell (or the terminal in macOS). The Carpentries offer an Open Source tutorial on using the shell: https://swcarpentry.github.io/shell-novice/</p> <p><code>dplPy</code> User Manual Documentation</p>"},{"location":"python/#development-version","title":"Development Version","text":"Development Versions <p>Note</p> <p>The dplPy Git repository contains:</p> <ul> <li>source code (<code>src/</code>)</li> <li>Jupyter Notebook example (<code>runnable_example.ipynb</code>)</li> <li>Test files in <code>csv</code> and <code>rwl</code> formats (<code>tests/data/&lt;format&gt;/</code>)</li> </ul> <p>We encourage community contributions on GitHub. </p> <p>Software Requirements:</p> <ul> <li> <p><code>git</code></p> </li> <li> <p><code>pip</code></p> </li> <li> <p><code>python</code> =&gt; v3.11.*</p> </li> <li> <p>(recommended) Miniconda3 &amp; Mamba</p> </li> </ul> <p>Clone the GitHub repository to your personal machine: </p> <pre><code>git clone https://github.com/OpenDendro/dplPy.git\ncd dplPy\n</code></pre> <p>Build the environment using the provided <code>environment.yml</code>: </p> <pre><code>mamba env create -f environment.yml \n</code></pre> <p>Activate the new environment: <code>conda activate dplpy</code></p> <p>Import <code>dplpy</code> and begin to work:</p> <pre><code>import os\ndirectory = os.getcwd().split(\"/\")\nif directory[-1] != 'src':\n    os.chdir(\"./src\")\nimport dplpy as dpl\n</code></pre>"},{"location":"python/#via-jupyter-notebook","title":"via  Jupyter Notebook","text":"<p>Jupyter Notebooks are recommmended for visualizing the graphical output of <code>dplpy</code>.</p> <p> Example <code>dplpy</code> Jupyter Notebook</p> <p> Floating Chronology Notebook</p> Creating a <code>dplpy</code> Jupyter Lab kernel locally <p>Activate the environment and create the Jupyter kernel:</p> <pre><code>mamba activate dplpy \npython -m ipykernel install --user --name dplpy --display-name \"Python (dplpy)\"\n</code></pre> <p>On Mac OS X or Linux, add the <code>conda</code> installation to the PATH:</p> <pre><code>echo \". /opt/conda/etc/profile.d/conda.sh\" &gt;&gt; /home/jovyan/.bash_profile \necho \"conda deactivate\" &gt;&gt; /home/jovyan/.bash_profile \necho \"conda activate dplpy\" &gt;&gt; /home/jovyan/.bash_profile\n. /opt/conda/etc/profile.d/conda.sh \nmamba activate dplpy \npython -m ipykernel install --user --name dplpy --display-name \"Python (dplpy)\"\nsource /home/jovyan/.bash_profile\n</code></pre> <p>Restart Jupyter Lab</p> <pre><code>jupyter lab\n</code></pre> <p>This will ensure that the dplpy environment created through <code>conda</code> is findable by Jupyter under the name <code>Python (dplpy)</code>.</p>"},{"location":"r/","title":"dplR","text":""},{"location":"r/#introduction","title":"Introduction","text":"<p>The dplR library is hosted on CRAN and can be run in RStudio and RStudio-Server (in browser).</p> <p>The R language and programming environment is now commonly used in dendrochronology. R is the world's  preeminent open-source statistical computing software and its power can be harnessed for tree-ring science through the contribution of add-on packages which are freely available on the internet. The R version of openDendro's codebase is contained in the package dplR.</p>"},{"location":"r/#working-online","title":"Working Online","text":"<p>You can run <code>dplR</code> in the cloud on a web browser after making a free account at posit.cloud or using the openDendro Hosted Apps.</p>"},{"location":"r/#installation","title":"Installation","text":"<p>You can run dplR on your own computer. First install R and then dplR which is an ad-on package to R. See Learning to Love dplR for more details.</p>"},{"location":"r/#stable-version","title":"Stable Version","text":"<p>The latest, stable, release version of <code>dplR</code> can be installed from The Comprehensive R Archive Network (CRAN) as follows:</p> <pre><code>install.packages(\"dplR\")\n</code></pre> <p>This is the officially released version of <code>dplR</code>.</p>"},{"location":"r/#development-version","title":"Development Version","text":"<p>The code here on GitHub is the version of <code>dplR</code> that is currently being developed. It might be unstable.</p> <p>You can install the development version using <code>r-universe</code>.</p> <pre><code>install.packages(\"dplR\", repos = \"https://opendendro.r-universe.dev/\")\n</code></pre> <p>Alternatively, the development version can be installed from the source code with the <code>devtools</code> package.</p> <pre><code>devtools::install_github(\"opendendro/dplR\")\n</code></pre> <p>Because <code>dplR</code> includes both C and Fortran code, you will need the appropriate compilers installed on your system to build from source.</p>"},{"location":"r/#getting-started","title":"Getting Started","text":"<p>New users of dplR can begin by working with the introductory chapters in Learning to Love dplR which contains instructional material for using <code>dplR</code>.</p>"},{"location":"assets/","title":"Index","text":"<p>images go here</p>"},{"location":"notebooks/bristlecone_example/","title":"Bristlecone Pine Example","text":"<p>This notebook uses raw ring widths for bristlecone pine (Pinus longaeva) at Campito Mountain in California, USA. This is one of the datasets included in <code>dplR</code> as well and include in the dplPy distribution.</p> <p>Graybill, D. A. and LaMarche, Jr., V. C. (1983) Campito Mountain Data Set. IGBP PAGES/World Data Center for Paleoclimatology Data Contribution Series 1983-CA533.RWL. NOAA/NCDC Paleoclimatology Program, Boulder, Colorado, USA: https://www.ncei.noaa.gov/pub/data/paleo/treering/measurements/northamerica/usa/ca533.rwl</p> <p>Let's start by importing some standard Python libraries.  We'll bring in Pandas (for working with 2 dimensional data), Matplotlib to help with plotting,</p> In\u00a0[\u00a0]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt \n\n# the following two lines nicely render figures in the notebook \n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\n\n# you can omit the line below if you'd like, but I really don't like the default fonts in Python, so I switch to Helvetica\nplt.rcParams['font.family'] = 'Helvetica'\nplt.rcParams['figure.figsize'] = (10, 5)\n</pre> import pandas as pd import matplotlib.pyplot as plt   # the following two lines nicely render figures in the notebook  %config InlineBackend.figure_format = 'retina' %matplotlib inline  # you can omit the line below if you'd like, but I really don't like the default fonts in Python, so I switch to Helvetica plt.rcParams['font.family'] = 'Helvetica' plt.rcParams['figure.figsize'] = (10, 5)  <p>We can update (or install) <code>dplpy</code> directly from this notebook if necessary using the 'bang' (<code>!</code>) command - you can just skip this code block or comment it out if you're already running the latest version from the Pypi repository.</p> In\u00a0[\u00a0]: Copied! <pre># if necessary, install dplpy\n# !pip install dplpy\n\n# if necessary upgrade dplpy to the latest version, v0.1.2 as of January 8th, 2024\n# !pip install dplpy --upgrade\n</pre> # if necessary, install dplpy # !pip install dplpy  # if necessary upgrade dplpy to the latest version, v0.1.2 as of January 8th, 2024 # !pip install dplpy --upgrade <p>Let us now import <code>dplpy</code> and we'll check the version number and see where the library is on our system.  If everything is working well, the codeblock should complete without error and you should see that you are running v0.1.2 from one of your Python directories (you will see <code>/envs/</code> in the path if you are in a virtual environment)</p> In\u00a0[\u00a0]: Copied! <pre>import dplpy as dpl\n\n# print out the version number of dplPy you are using - should be v0.1.2 \nprint('Currently using the following version of dplPy:', dpl.__version__)\n\n# You should see the path to your local Python installation\nprint('Currently using the following directory for dplPy:', dpl.__file__)\n</pre> import dplpy as dpl  # print out the version number of dplPy you are using - should be v0.1.2  print('Currently using the following version of dplPy:', dpl.__version__)  # You should see the path to your local Python installation print('Currently using the following directory for dplPy:', dpl.__file__) <p>Let's read the Campito Mountain raw measurement series into our notebook now.  We will use the <code>dpl.readers</code> method to do this.  For the moment, <code>.readers</code> automatically identified the file type from the file suffix, looking for <code>.rwl</code> for Tucson formatted decadal files, or <code>.csv</code>.  In the future, the method will recognize a wider variety of suffixes (e.g. <code>.raw</code>), allow you to pass the file type directly to the method, or pull from the ITRDB.</p> In\u00a0[\u00a0]: Copied! <pre># Read in the Campito Mountain series and assign to a variable\nca533 = dpl.readers(\"ca533.rwl\")\n</pre> # Read in the Campito Mountain series and assign to a variable ca533 = dpl.readers(\"ca533.rwl\") In\u00a0[\u00a0]: Copied! <pre># take a look at the DataFrame\nca533 #1358 years by 34 columns\n</pre> # take a look at the DataFrame ca533 #1358 years by 34 columns <p>We could also read in the Sheep Mountain update (<code>ca667.rwl</code>).  This file has headers, though - we tell <code>.readers</code> about the existence of the Tucson style (3 line) headers when we call <code>.readers</code>:</p> In\u00a0[\u00a0]: Copied! <pre># Can specify whether file has headers so reading of data is done appropriately\nca667 = dpl.readers(\"ca667.rwl\", header=True)\nca667 # 310 columns, 4655 years\n</pre> # Can specify whether file has headers so reading of data is done appropriately ca667 = dpl.readers(\"ca667.rwl\", header=True) ca667 # 310 columns, 4655 years In\u00a0[\u00a0]: Copied! <pre>print(ca533.index) # Campito Mountain chronology covers 626 to 1983\nprint(ca667.index)  # Campito Mountain chronology covers -2649 (BCE) to 2005!\n</pre> print(ca533.index) # Campito Mountain chronology covers 626 to 1983 print(ca667.index)  # Campito Mountain chronology covers -2649 (BCE) to 2005! <p>We could, if we wanted, use Pandas to merge the two datasets to form a combined Sheep-Campito Mountain chronology.  The codeblock below shows how to use Pandas .merge to do this.  Because this creates a very large and very long set of series, we won't use this in the rest of the notebook, but it is useful to see how you might do this.  Of note is that the <code>.merge</code> function is NOT unique to <code>dplpy</code> - following the overall philosophy also adopted for dplR, we don't create functions with openDendro to do common data manipulations or data handling (e.g. things that are not specific to dendrochronology):</p> In\u00a0[\u00a0]: Copied! <pre>shpcmp = pd.merge(ca533, ca667, left_index=True, right_index=True, how='outer') # this is just a pure Pandas command\nshpcmp # pretty-print from Pandas will show 4655 years x 344 columns\n</pre> shpcmp = pd.merge(ca533, ca667, left_index=True, right_index=True, how='outer') # this is just a pure Pandas command shpcmp # pretty-print from Pandas will show 4655 years x 344 columns <p>Back to Campito Mountain (<code>ca533</code>)now.  Our <code>dplpy</code> provides both <code>.summary</code> statistics (the individual series mean, quantiles, max and min values) as well as the <code>.statistics</code> of the individual series including first and last year, mean, median, standard deviation, skew, gini coefficient and AR1 coefficient similar to ARSTAN.  The module names follow those in <code>dplR</code> and report complementary data:</p> In\u00a0[\u00a0]: Copied! <pre>dpl.summary(ca533)\n</pre> dpl.summary(ca533) In\u00a0[\u00a0]: Copied! <pre>dpl.stats(ca533)\n</pre> dpl.stats(ca533) <p>Another module available is the <code>.report</code>, which has information similar to that provided by COFECHA and mirrors the similar function in dplR, including the years with locally absent rings in each individual series:</p> In\u00a0[\u00a0]: Copied! <pre># We can get a report of some of the essential features of this dataset from .report\ndpl.report(ca533)\n</pre> # We can get a report of some of the essential features of this dataset from .report dpl.report(ca533) <p>As in dplR, we can readily <code>.plot</code> spaghetti (<code>type=\"spag\"</code>) or segment (<code>type=\"seg\"</code>) plots.  Note that <code>.plot</code> here is a method attached to the core <code>dplpy</code> library.</p> In\u00a0[\u00a0]: Copied! <pre>dpl.plot(ca533, type=\"seg\")\ndpl.plot(ca533, type=\"spag\")\n</pre> dpl.plot(ca533, type=\"seg\") dpl.plot(ca533, type=\"spag\") <p>Of course, detrending is one of the most important functions of DPL.</p> In\u00a0[\u00a0]: Copied! <pre>ca533_rwi = dpl.detrend(ca533, fit=\"spline\", period=200, method=\"residual\", plot=True)\n</pre> ca533_rwi = dpl.detrend(ca533, fit=\"spline\", period=200, method=\"residual\", plot=True) In\u00a0[\u00a0]: Copied! <pre>cam161_spline67 = dpl.detrend(ca533[\"CAM161\"], fit=\"spline\", period=-67,method=\"residual\", plot=True)\ncam161_negex = dpl.detrend(ca533[\"CAM161\"], fit=\"Hugershoff\", method=\"difference\", plot=True)\n</pre> cam161_spline67 = dpl.detrend(ca533[\"CAM161\"], fit=\"spline\", period=-67,method=\"residual\", plot=True) cam161_negex = dpl.detrend(ca533[\"CAM161\"], fit=\"Hugershoff\", method=\"difference\", plot=True) In\u00a0[\u00a0]: Copied! <pre>ca533_crn_std = dpl.chron(ca533_rwi, biweight=True, prewhiten=False, plot=True)\nca533_crn_res = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True)\n</pre> ca533_crn_std = dpl.chron(ca533_rwi, biweight=True, prewhiten=False, plot=True) ca533_crn_res = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True) In\u00a0[\u00a0]: Copied! <pre>dpl.xdate(ca533_rwi, prewhiten=True, corr=\"Spearman\", slide_period=50, bin_floor=10, p_val=0.05, show_flags=True)\n</pre> dpl.xdate(ca533_rwi, prewhiten=True, corr=\"Spearman\", slide_period=50, bin_floor=10, p_val=0.05, show_flags=True) In\u00a0[\u00a0]: Copied! <pre>dpl.series_corr(ca533_rwi, \"CAM181\", prewhiten=True, corr=\"Spearman\", seg_length=50, bin_floor=10, p_val=0.05)\n</pre> dpl.series_corr(ca533_rwi, \"CAM181\", prewhiten=True, corr=\"Spearman\", seg_length=50, bin_floor=10, p_val=0.05)"},{"location":"notebooks/bristlecone_example/#campito-mountain-bristlecone-example","title":"Campito Mountain Bristlecone Example\u00b6","text":""},{"location":"notebooks/bristlecone_example/#crossdating-functions","title":"Crossdating Functions\u00b6","text":""},{"location":"notebooks/floating_chronology_example/","title":"Floating Chronology Example","text":"In\u00a0[22]: Copied! <pre>import numpy as np\nimport scipy as sp\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\n# nicely render figures in the notebook \n%config InlineBackend.figure_format = 'retina'\n%matplotlib inline\n\n# you can omit the line below if you'd like, but I really don't like the default fonts in Python, so I switch to Helvetica\nplt.rcParams['font.family'] = 'Helvetica'\nplt.rcParams['figure.figsize'] = (10, 5)\n</pre> import numpy as np import scipy as sp import pandas as pd import matplotlib as mpl import matplotlib.pyplot as plt  # nicely render figures in the notebook  %config InlineBackend.figure_format = 'retina' %matplotlib inline  # you can omit the line below if you'd like, but I really don't like the default fonts in Python, so I switch to Helvetica plt.rcParams['font.family'] = 'Helvetica' plt.rcParams['figure.figsize'] = (10, 5)  <p>Let's import <code>dplpy</code> and check to make sure we've got the latest version and are using the Pypi installed version:</p> In\u00a0[23]: Copied! <pre>import dplpy\n\n# print out the version number of dplPy you are using - should be v0.1.2\nprint('Currently using the following version of dplPy:', dplpy.__version__)\n\n# You should see the path to your local Python installation\nprint('Currently using the following directory for dplPy:', dplpy.__file__)\n</pre> import dplpy  # print out the version number of dplPy you are using - should be v0.1.2 print('Currently using the following version of dplPy:', dplpy.__version__)  # You should see the path to your local Python installation print('Currently using the following directory for dplPy:', dplpy.__file__) <pre>Currently using the following version of dplPy: 0.1.2\nCurrently using the following directory for dplPy: /Users/kja/anaconda3/envs/dplpy/lib/python3.12/site-packages/dplpy/__init__.py\n</pre> <p>We'll use <code>reader</code> to get the raw ring width and we'll plot the series using Pandas build-in plotting.</p> In\u00a0[24]: Copied! <pre>df = dplpy.readers(\"wwr.rwl\")\ndf.plot(legend=False);\n</pre> df = dplpy.readers(\"wwr.rwl\") df.plot(legend=False); <pre>\nAttempting to read input file: wwr.rwl as .rwl format\n\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['WWRC501', 'WWRgq01', 'WWRa101', 'WWRa301', 'WWRgw01', 'WWRgw02', 'WWRl501', 'WWRgx01', 'WWRgy01', 'WWRbh01', 'WWRa601', 'WWRgs01', 'WWRc401', 'WWRc402', 'WWRst01a', 'WWRst01b', 'WWRst02a', 'WWRL601', 'WWRb201', 'WWRL801'] \n\n</pre> <p>Get the series summary:</p> In\u00a0[25]: Copied! <pre>dplpy.summary(df)\n</pre> dplpy.summary(df) Out[25]: WWRC501 WWRgq01 WWRa101 WWRa301 WWRgw01 WWRgw02 WWRl501 WWRgx01 WWRgy01 WWRbh01 WWRa601 WWRgs01 WWRc401 WWRc402 WWRst01a WWRst01b WWRst02a WWRL601 WWRb201 WWRL801 count 184.000000 199.000000 113.000000 123.000000 226.000000 172.000000 107.000000 220.000000 235.000000 223.000000 69.000000 226.000000 164.000000 165.000000 121.000000 85.000000 90.000000 147.000000 140.000000 135.000000 mean 1.417060 1.406482 2.523788 1.705341 1.146354 0.846506 2.167056 1.181932 1.094809 1.152668 2.368159 1.284230 1.500646 1.494570 2.458306 3.344494 3.916389 1.815898 1.640429 1.379948 std 0.713585 0.866385 1.123288 0.834921 1.040933 0.455078 1.081787 0.671113 0.976220 0.580281 1.304499 0.604241 0.862143 0.874111 1.814101 1.576738 1.560494 0.966497 1.180153 0.821949 min 0.208000 0.093000 0.211000 0.145000 0.000000 0.000000 0.167000 0.111000 0.000000 0.000000 0.160000 0.000000 0.000000 0.000000 0.325000 0.800000 0.821000 0.000000 0.100000 0.148000 25% 0.891000 0.789500 1.808000 1.066000 0.517000 0.512500 1.255500 0.696500 0.522000 0.776500 1.216000 0.856000 0.826750 0.811000 1.320000 2.161000 2.892250 1.074000 0.780750 0.769000 50% 1.352500 1.183000 2.472000 1.591000 0.827000 0.756500 2.073000 1.052500 0.777000 1.049000 2.285000 1.283000 1.291000 1.297000 2.019000 3.064000 3.847500 1.735000 1.315500 1.362000 75% 1.848250 1.916000 3.295000 2.300000 1.393500 1.127000 3.047000 1.473500 1.300000 1.412000 3.134000 1.684500 2.055750 2.001000 3.077000 4.061000 4.857250 2.396500 2.277750 1.761500 max 3.666000 4.165000 4.984000 4.166000 6.458000 2.236000 4.946000 3.836000 5.408000 3.612000 5.356000 2.992000 4.139000 4.549000 8.399000 7.962000 8.461000 4.835000 5.018000 4.550000 <p>Get the series stats:</p> In\u00a0[26]: Copied! <pre>dplpy.stats(df)\n</pre> dplpy.stats(df) Out[26]: series first last year mean median stdev skew gini ar1 1 WWRC501 1000 1183 184 1.417 1.35 0.714 0.612 0.282 0.782 2 WWRgq01 976 1174 199 1.406 1.18 0.866 0.906 0.337 0.858 3 WWRa101 1066 1178 113 2.524 2.47 1.123 0.051 0.253 0.753 4 WWRa301 1059 1181 123 1.705 1.59 0.835 0.454 0.275 0.788 5 WWRgw01 961 1186 226 1.146 0.83 1.041 2.478 0.420 0.871 6 WWRgw02 1011 1182 172 0.847 0.76 0.455 0.720 0.298 0.782 7 WWRl501 1079 1185 107 2.167 2.07 1.082 0.264 0.283 0.818 8 WWRgx01 960 1179 220 1.182 1.05 0.671 1.257 0.301 0.830 9 WWRgy01 946 1180 235 1.095 0.78 0.976 2.173 0.415 0.933 10 WWRbh01 962 1184 223 1.153 1.05 0.580 1.284 0.266 0.738 11 WWRa601 1116 1184 69 2.368 2.28 1.304 0.270 0.311 0.879 12 WWRgs01 957 1182 226 1.284 1.28 0.604 0.218 0.266 0.751 13 WWRc401 1020 1183 164 1.501 1.29 0.862 0.772 0.317 0.801 14 WWRc402 1020 1184 165 1.495 1.30 0.874 0.971 0.319 0.810 15 WWRst01a 956 1076 121 2.458 2.02 1.814 1.581 0.375 0.769 16 WWRst01b 956 1040 85 3.344 3.06 1.577 0.931 0.256 0.615 17 WWRst02a 954 1043 90 3.916 3.85 1.560 0.486 0.221 0.635 18 WWRL601 1015 1161 147 1.816 1.74 0.966 0.360 0.300 0.743 19 WWRb201 1044 1183 140 1.640 1.32 1.180 0.903 0.393 0.926 20 WWRL801 1050 1184 135 1.380 1.36 0.822 0.990 0.322 0.799 <p>Make a segment plot:</p> In\u00a0[27]: Copied! <pre>dplpy.plot(df,type=\"seg\")\n</pre> dplpy.plot(df,type=\"seg\")  <p>Make a spaghetti plot:</p> In\u00a0[28]: Copied! <pre>dplpy.plot(df, type=\"spag\")\n</pre> dplpy.plot(df, type=\"spag\") <p>Let's look at the crossdating:</p> In\u00a0[29]: Copied! <pre>dplpy.xdate(df, prewhiten=True, corr=\"Spearman\", slide_period=50,bin_floor=100, p_val=0.05, show_flags=True)\n</pre> dplpy.xdate(df, prewhiten=True, corr=\"Spearman\", slide_period=50,bin_floor=100, p_val=0.05, show_flags=True) <pre>Flags for WWRgy01\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1125-1174   -1 -0.15 -0.16 -0.32 -0.05  0.12  0.04 -0.12  0.07  0.32  0.40  0.27  0.19  0.24  0.26  0.12 -0.02 -0.01  0.06 -0.07 -0.24 -0.26\n\nFlags for WWRl501\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1125-1174    1  0.14 -0.17 -0.05 -0.03 -0.10 -0.16 -0.01  0.02 -0.08  0.11  0.39  0.48  0.24 -0.02  0.18  0.15  0.08  0.03 -0.14 -0.23 -0.26\n\n\n</pre> Out[29]: WWRC501 WWRL601 WWRL801 WWRa101 WWRa301 WWRa601 WWRb201 WWRbh01 WWRc401 WWRc402 WWRgq01 WWRgs01 WWRgw01 WWRgw02 WWRgx01 WWRgy01 WWRl501 WWRst01a WWRst01b WWRst02a 1000-1049 NaN NaN NaN NaN NaN NaN NaN 0.335510 NaN NaN 0.399184 0.375750 0.499640 NaN 0.528836 0.466315 NaN 0.536230 NaN NaN 1025-1074 0.487539 NaN NaN NaN NaN NaN NaN 0.621417 NaN NaN 0.602017 0.356447 0.605762 0.698920 0.443745 0.577623 NaN 0.455462 NaN NaN 1050-1099 0.621128 0.286050 NaN NaN NaN NaN 0.527683 0.594430 0.428956 0.478992 0.510972 0.506170 0.557167 0.614118 0.516927 0.629196 NaN NaN NaN NaN 1075-1124 0.575894 0.421849 0.466987 0.609892 0.603649 NaN 0.487635 0.521441 0.502425 0.557551 0.484370 0.437791 0.560816 0.620360 0.660504 0.657719 NaN NaN NaN NaN 1100-1149 0.469676 0.485426 0.480720 0.583385 0.655318 NaN 0.549772 0.585786 0.538343 0.654742 0.612101 0.358463 0.740024 0.762977 0.649748 0.620264 0.463721 NaN NaN NaN 1125-1174 0.530852 NaN 0.466218 0.369316 0.637647 0.618727 0.566291 0.537383 0.558319 0.545450 0.446915 0.509916 0.523457 0.515486 0.510012 0.267611 0.386218 NaN NaN NaN <p>Apply a 50 year spline and calculate the residuals (division) from that spline to detrend series:</p> In\u00a0[30]: Copied! <pre>df_rwi = dplpy.detrend(df, fit=\"spline\", period=50, method=\"residual\", plot=True)\n</pre> df_rwi = dplpy.detrend(df, fit=\"spline\", period=50, method=\"residual\", plot=True) <p>Create a residual (AR-modeled) chronology:</p> In\u00a0[32]: Copied! <pre>crn_res = dplpy.chron(df_rwi, biweight=True, prewhiten=True, plot=True)\n</pre> crn_res = dplpy.chron(df_rwi, biweight=True, prewhiten=True, plot=True)"},{"location":"notebooks/floating_chronology_example/#dplpy-example-using-an-entirely-floating-chronology","title":"<code>dplPy</code> example using an entirely floating chronology\u00b6","text":""},{"location":"notebooks/intro_dplpy/","title":"Introduction Example","text":"<p>This Jupyter Notebook must be run within the <code>dplPy</code> directory. Refer to <code>README.md</code> for instructions on how to run Jupyter Notebook and the required <code>conda Environment</code> on your OS.</p> <p>Import packages and load test data from the <code>test</code> directory.</p> <p>Note: choose your own example file from <code>/tests/data/&lt;format&gt;/&lt;file.format&gt;</code>. In this example, the test file is <code>rwl/ca533.rwl</code>.</p> In\u00a0[11]: Copied! <pre># Import statements\n# loading test example as data\n# Find examples in `tests` folder\n\nimport os\ndirectory = os.getcwd().split(\"/\")\nif directory[-1] != 'src':\n    os.chdir(\"./src\")\nimport dplpy as dpl\ndata  = dpl.readers(\"../tests/data/rwl/ca533.rwl\")\n</pre> # Import statements # loading test example as data # Find examples in `tests` folder  import os directory = os.getcwd().split(\"/\") if directory[-1] != 'src':     os.chdir(\"./src\") import dplpy as dpl data  = dpl.readers(\"../tests/data/rwl/ca533.rwl\") <pre>\nAttempting to read input file: ca533.rwl as .rwl format\n\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['CAM011', 'CAM021', 'CAM031', 'CAM032', 'CAM041', 'CAM042', 'CAM051', 'CAM061', 'CAM062', 'CAM071', 'CAM072', 'CAM081', 'CAM082', 'CAM091', 'CAM092', 'CAM101', 'CAM102', 'CAM111', 'CAM112', 'CAM121', 'CAM122', 'CAM131', 'CAM132', 'CAM141', 'CAM151', 'CAM152', 'CAM161', 'CAM162', 'CAM171', 'CAM172', 'CAM181', 'CAM191', 'CAM201', 'CAM211']\n</pre> <p>Summarize data using the <code>summary</code> function.</p> In\u00a0[12]: Copied! <pre># Summarizes input data\n\ndpl.summary(data)\n</pre> # Summarizes input data  dpl.summary(data) Out[12]: CAM011 CAM021 CAM031 CAM032 CAM041 CAM042 CAM051 CAM061 CAM062 CAM071 ... CAM151 CAM152 CAM161 CAM162 CAM171 CAM172 CAM181 CAM191 CAM201 CAM211 count 454.000000 551.000000 628.000000 549.000000 301.000000 446.000000 737.000000 627.000000 459.000000 947.000000 ... 749.000000 229.000000 504.000000 1000.000000 758.000000 797.000000 781.000000 791.000000 593.000000 1343.000000 mean 0.439581 0.424465 0.349156 0.293224 0.525648 0.439148 0.273012 0.462281 0.441939 0.249071 ... 0.445648 0.533799 0.339464 0.396710 0.450264 0.482296 0.282638 0.366271 0.473929 0.356813 std 0.221801 0.185397 0.213666 0.162930 0.222568 0.347705 0.139691 0.201785 0.188389 0.109357 ... 0.272561 0.194947 0.148916 0.184057 0.209848 0.249002 0.148853 0.335788 0.180967 0.182086 min 0.000000 0.050000 0.000000 0.000000 0.100000 0.070000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.060000 0.000000 0.000000 0.080000 0.080000 0.000000 0.000000 0.000000 0.000000 25% 0.290000 0.290000 0.180000 0.180000 0.350000 0.270000 0.180000 0.335000 0.330000 0.180000 ... 0.240000 0.410000 0.230000 0.260000 0.300000 0.310000 0.170000 0.170000 0.350000 0.220000 50% 0.400000 0.400000 0.290000 0.260000 0.530000 0.360000 0.250000 0.470000 0.450000 0.250000 ... 0.390000 0.520000 0.330000 0.370000 0.400000 0.420000 0.250000 0.250000 0.470000 0.340000 75% 0.540000 0.520000 0.510000 0.390000 0.680000 0.460000 0.330000 0.600000 0.580000 0.320000 ... 0.610000 0.660000 0.430000 0.510000 0.580000 0.590000 0.380000 0.455000 0.580000 0.470000 max 1.360000 1.110000 1.030000 0.850000 1.380000 3.030000 1.320000 1.090000 0.920000 0.620000 ... 1.640000 1.250000 0.900000 1.040000 1.540000 1.980000 0.800000 2.540000 1.490000 1.100000 <p>8 rows \u00d7 34 columns</p> <p>Show general statistics of <code>data</code> through the <code>stats</code> function.</p> In\u00a0[3]: Copied! <pre># General statistics of input data\n\ndpl.stats(data)\n</pre> # General statistics of input data  dpl.stats(data) Out[3]: series first last year mean median stdev skew gini ar1 1 CAM011 1530 1983 454 0.440 0.40 0.222 1.029 0.273 0.698 2 CAM021 1433 1983 551 0.424 0.40 0.185 0.946 0.237 0.702 3 CAM031 1356 1983 628 0.349 0.29 0.214 0.690 0.341 0.809 4 CAM032 1435 1983 549 0.293 0.26 0.163 0.717 0.309 0.665 5 CAM041 1683 1983 301 0.526 0.53 0.223 0.488 0.238 0.710 6 CAM042 1538 1983 446 0.439 0.36 0.348 3.678 0.324 0.881 7 CAM051 1247 1983 737 0.273 0.25 0.140 1.836 0.262 0.705 8 CAM061 1357 1983 627 0.462 0.47 0.202 -0.111 0.247 0.510 9 CAM062 1525 1983 459 0.442 0.45 0.188 -0.266 0.240 0.529 10 CAM071 1037 1983 947 0.249 0.25 0.109 0.027 0.247 0.578 11 CAM072 1114 1983 870 0.309 0.29 0.163 0.698 0.292 0.735 12 CAM081 1081 1983 903 0.327 0.31 0.124 0.555 0.211 0.723 13 CAM082 977 1983 1007 0.285 0.29 0.114 0.312 0.223 0.771 14 CAM091 1460 1983 524 0.532 0.52 0.255 0.425 0.267 0.632 15 CAM092 1591 1983 393 0.349 0.34 0.226 0.337 0.369 0.561 16 CAM101 1727 1983 257 0.568 0.56 0.260 0.254 0.259 0.716 17 CAM102 1665 1983 319 0.604 0.62 0.261 0.082 0.243 0.677 18 CAM111 1446 1983 538 0.625 0.62 0.249 0.196 0.225 0.625 19 CAM112 1471 1983 513 0.570 0.56 0.211 0.223 0.207 0.583 20 CAM121 1000 1983 984 0.259 0.26 0.106 0.042 0.231 0.594 21 CAM122 1000 1983 984 0.271 0.27 0.109 0.346 0.223 0.653 22 CAM131 695 1970 1276 0.552 0.53 0.198 0.330 0.202 0.788 23 CAM132 710 1232 523 0.397 0.38 0.148 0.871 0.203 0.810 24 CAM141 1030 1970 941 0.627 0.60 0.204 0.695 0.177 0.746 25 CAM151 1222 1970 749 0.446 0.39 0.273 1.068 0.332 0.765 26 CAM152 1221 1449 229 0.534 0.52 0.195 0.297 0.203 0.695 27 CAM161 1106 1609 504 0.339 0.33 0.149 0.633 0.243 0.794 28 CAM162 971 1970 1000 0.397 0.37 0.184 0.647 0.259 0.840 29 CAM171 1213 1970 758 0.450 0.40 0.210 1.250 0.250 0.799 30 CAM172 1174 1970 797 0.482 0.42 0.249 1.622 0.268 0.847 31 CAM181 1190 1970 781 0.283 0.25 0.149 0.706 0.293 0.805 32 CAM191 1180 1970 791 0.366 0.25 0.336 2.359 0.429 0.876 33 CAM201 990 1582 593 0.474 0.47 0.181 0.772 0.208 0.709 34 CAM211 626 1968 1343 0.357 0.34 0.182 0.513 0.286 0.683 In\u00a0[6]: Copied! <pre># Detrends a series by fitting to spline and calculating residuals.\n# !!! Note: spline is the current detrent default method;\n# !!! Note: Line graph is defaulted to show residuals.\n# \n# Detrend funtion can modified to fit Hugershoff, modified negative exponential, linear, horizonal.\n# This option will be available in the short term future.\n#\n# The detrend function accepts a specific series as input in the following format:\n\ndpl.detrend(data[\"CAM191\"])\n</pre> # Detrends a series by fitting to spline and calculating residuals. # !!! Note: spline is the current detrent default method; # !!! Note: Line graph is defaulted to show residuals. #  # Detrend funtion can modified to fit Hugershoff, modified negative exponential, linear, horizonal. # This option will be available in the short term future. # # The detrend function accepts a specific series as input in the following format:  dpl.detrend(data[\"CAM191\"]) In\u00a0[9]: Copied! <pre># Returns parameters\n# As default max lag is set to 5; \n# add second parameter (integer) to change max lag.\n\ndpl.autoreg(data[\"CAM191\"], 10)\n</pre> # Returns parameters # As default max lag is set to 5;  # add second parameter (integer) to change max lag.  dpl.autoreg(data[\"CAM191\"], 10) <pre>/Users/michelecosi/miniconda3/envs/dplpy4/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n/Users/michelecosi/miniconda3/envs/dplpy4/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n</pre> Out[9]: <pre>const         0.022210\nCAM191.L1     0.503373\nCAM191.L2     0.087230\nCAM191.L3     0.143716\nCAM191.L4     0.020119\nCAM191.L5    -0.027769\nCAM191.L6    -0.010029\nCAM191.L7     0.001373\nCAM191.L8     0.025588\nCAM191.L9     0.042340\nCAM191.L10    0.136916\ndtype: float64</pre> In\u00a0[10]: Copied! <pre># Returns residuals+mean after \n# choosing best AR model fit with chosen max lag (default=5).\n\ndpl.ar_func(data[\"CAM191\"])\n</pre> # Returns residuals+mean after  # choosing best AR model fit with chosen max lag (default=5).  dpl.ar_func(data[\"CAM191\"]) <pre>/Users/michelecosi/miniconda3/envs/dplpy4/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n/Users/michelecosi/miniconda3/envs/dplpy4/lib/python3.8/site-packages/statsmodels/tsa/base/tsa_model.py:471: ValueWarning: An unsupported index was provided and will be ignored when e.g. forecasting.\n  self._init_dates(dates, freq)\n</pre> Out[10]: <pre>array([-0.23485391,  0.61703427,  0.07848781,  0.30139532,  0.31970781,\n        0.7709527 , -0.13122202,  0.73735556,  0.79259251,  1.03150292,\n        0.19654108, -0.13481225,  0.61573077,  0.65068195,  0.43323283,\n        0.95951473, -0.37325966,  0.50079401, -0.10560507,  0.05038   ,\n        0.56974055,  0.3394715 ,  0.51772866,  0.28269221,  0.42226138,\n        0.63341811,  1.4739965 ,  0.28602606,  0.2604808 ,  0.27934854,\n       -0.34367123,  0.33895547,  0.19844979, -0.07263543,  0.45164677,\n        0.85279497,  1.01238366,  0.74549344,  0.51996229,  0.77010877,\n        0.46936605,  0.0785818 ,  0.09314398,  0.47463727,  0.83439219,\n        0.03987213,  0.81898116,  0.58663827,  0.30382456,  0.43938001,\n        0.53303445,  0.23979872,  0.42268213,  0.6094634 ,  0.44863191,\n        0.52719227,  0.14005905,  0.32252156,  0.14725286,  0.29913277,\n        0.61191963,  0.44957831,  0.42429965,  0.5959667 ,  0.49178689,\n        0.45410314,  0.25085001,  0.42356281,  0.55757744, -0.24367237,\n        0.15117969,  0.66712127,  0.69258454, -0.12784539,  0.6789434 ,\n        0.60783217,  0.61407111,  0.62246195,  0.41272014, -0.00936233,\n       -0.0480617 ,  0.0694901 ,  0.33897886,  0.36166267,  0.30446064,\n        0.48141051,  0.56882759,  0.64385542,  0.30465005,  0.51569189,\n        0.79791196,  0.39735395,  0.31585581,  0.15895399,  0.58666957,\n        0.40978068,  0.15985022,  0.40607871,  0.40388826,  0.3096272 ,\n        0.0342205 ,  0.55427596,  0.52377703,  0.26738502,  0.53938707,\n        0.33790184,  0.5382865 ,  0.41514302,  0.35265856,  0.30646022,\n        0.50990241,  0.4243464 ,  0.34850027,  0.18307126,  0.2732797 ,\n        0.51736136,  0.54959262,  0.45413807,  0.29612966,  0.45052545,\n        0.46909323,  0.36982143,  0.39153275,  0.64037135,  0.27772417,\n        0.31826222,  0.52523135,  0.51617064,  0.45047841,  0.49865942,\n        0.45413743,  0.05947446,  0.28437018,  0.38299106,  0.22614538,\n        0.36022031,  0.50037608,  0.66379821, -0.08412939,  0.80206774,\n        0.55463454,  0.65119228,  0.55409197,  0.41811455,  0.18790989,\n        0.31775581,  0.42356545, -0.11198417,  0.61155616, -0.00400045,\n        0.42381569,  0.16696088,  0.42339441,  0.27222434,  0.34009664,\n        0.37453456,  0.47170985,  0.40264874,  0.51659048,  0.36462353,\n        0.38726786,  0.41915095,  0.43958695,  0.2692216 ,  0.4572227 ,\n        0.37663572,  0.37516709,  0.51114637,  0.51301848,  0.20921054,\n        0.38756127,  0.50750609,  0.34038451,  0.22999705,  0.41815438,\n        0.1613977 ,  0.09181197,  0.28494723,  0.39606824,  0.51561671,\n        0.36811293,  0.35614156,  0.56900867,  0.40354229,  0.61000538,\n        0.42411197,  0.19417072,  0.45693544,  0.59061735,  0.46628091,\n        0.42696804,  0.4041577 ,  0.08013931,  0.43943249,  0.14019481,\n        0.48190889,  0.58643436,  0.55826101,  0.5105765 ,  0.48199429,\n        0.54310525,  0.27927251,  0.30634321,  0.32827562,  0.52612092,\n        0.35138125,  0.31463398,  0.54032327,  0.32644925,  0.52935574,\n        0.37253887,  0.31671287,  0.25945758,  0.24138538,  0.29070475,\n        0.48241831,  0.07597918,  0.5339914 ,  0.43070055,  0.38209941,\n        0.54220723,  0.41888816,  0.13905795,  0.37808339,  0.5182685 ,\n        0.33383431,  0.43731525,  0.49870236,  0.39623926,  0.20947203,\n        0.43548597,  0.33406516,  0.61692086,  0.20888847,  0.43691344,\n        0.40875671,  0.28687993,  0.33627451,  0.45303114,  0.39374527,\n        0.30778941,  0.28913639,  0.52006099,  0.29244499,  0.50501874,\n        0.30752383,  0.23357822,  0.51230839,  0.49609901,  0.03676054,\n        0.66377245,  0.46695285,  0.28583492,  0.24910179,  0.38565254,\n        0.51333396,  0.34451973,  0.30623028,  0.28624853,  0.2484529 ,\n        0.30577825,  0.23987747,  0.33826147,  0.21603312,  0.39775025,\n        0.24295094,  0.37695061,  0.35095463,  0.42067853,  0.29581275,\n        0.43572216,  0.26531939,  0.30630855,  0.30089194,  0.3770091 ,\n        0.29272387,  0.4289114 ,  0.35323252,  0.37325316,  0.33271626,\n        0.35549783,  0.39572473,  0.35150282,  0.37620792,  0.35962842,\n        0.37867256,  0.31254057,  0.30823814,  0.33498754,  0.30991824,\n        0.22106116,  0.47600479,  0.36901305,  0.35061435,  0.34308667,\n        0.40811558,  0.42101334,  0.30019725,  0.38620366,  0.35702432,\n        0.38213919,  0.46361132,  0.32010587,  0.35373268,  0.32502378,\n        0.44608853,  0.38144384,  0.32546815,  0.47334522,  0.447194  ,\n        0.2980056 ,  0.23089079,  0.10410034,  0.34967115,  0.45274025,\n        0.25222561,  0.49008612,  0.40675568,  0.41047231,  0.29493453,\n        0.32821789,  0.28024849,  0.35079935,  0.37324237,  0.3868993 ,\n        0.37054072,  0.39523113,  0.44287362,  0.31951994,  0.3604808 ,\n        0.25996029,  0.48716987,  0.3405697 ,  0.36588728,  0.36170745,\n        0.47566618,  0.36956056,  0.12281409,  0.17040604,  0.43080876,\n        0.45339988,  0.38657195,  0.51062833,  0.24663067,  0.2944111 ,\n        0.42325223,  0.30723836,  0.39412815,  0.11526089,  0.45728477,\n        0.49026851,  0.44408903,  0.52517481,  0.30415652,  0.44375   ,\n        0.36124269,  0.10234557,  0.14085553,  0.38944291,  0.33393161,\n        0.24747679,  0.38142452,  0.41099257,  0.42110084,  0.33544361,\n        0.42189318,  0.31541684,  0.45510977,  0.34895568,  0.37032153,\n        0.394427  ,  0.27837366,  0.4047497 ,  0.10612834,  0.4954011 ,\n        0.37753079,  0.46006873,  0.25295007,  0.44859502,  0.36381464,\n        0.20880894,  0.48459165,  0.43634343,  0.27762589,  0.42387602,\n        0.25771294,  0.14473909,  0.32079832,  0.31786878,  0.4091164 ,\n        0.38066256,  0.35516329,  0.33930981,  0.21244847,  0.29353493,\n        0.32229358,  0.49335149,  0.34781998,  0.46855312,  0.32200119,\n        0.34367487,  0.36297008,  0.36864722,  0.35925875,  0.31742445,\n        0.26701958,  0.3770456 ,  0.29160236,  0.39071092,  0.46679997,\n        0.31216462,  0.44482003,  0.38258064,  0.45239854,  0.36552033,\n        0.21686622,  0.37011469,  0.20408543,  0.4766801 ,  0.37603546,\n        0.40307278,  0.26970016,  0.18577225,  0.5308118 ,  0.41354986,\n        0.35416121,  0.30267815,  0.2431837 ,  0.38263567,  0.43256545,\n        0.28026539,  0.47917932,  0.36702031,  0.12126338,  0.41128376,\n        0.36910108,  0.32816472,  0.39654297,  0.2728162 ,  0.39017996,\n        0.41235812,  0.32996245,  0.3658953 ,  0.39350694,  0.41380087,\n        0.33389311,  0.28319668,  0.28699192,  0.38468972,  0.45064504,\n        0.43507548,  0.34339383,  0.38741558,  0.29479123,  0.38417023,\n        0.42920096,  0.21992131,  0.35415206,  0.41429713,  0.28045376,\n        0.34746292,  0.3414929 ,  0.30219699,  0.39595103,  0.36762076,\n        0.35817275,  0.43388609,  0.34128867,  0.29889916,  0.25351852,\n        0.20326752,  0.42197456,  0.47608529,  0.42410472,  0.38622311,\n        0.43329866,  0.38954634,  0.26966697,  0.31011112,  0.41435408,\n        0.3312214 ,  0.30561928,  0.34896042,  0.14830434,  0.47081585,\n        0.16646207,  0.41601987,  0.37207901,  0.42193349,  0.25398928,\n        0.24741244,  0.33292854,  0.27909425,  0.44545975,  0.36996414,\n        0.40320527,  0.23548363,  0.46307916,  0.35668605,  0.37330783,\n        0.37192971,  0.29535696,  0.41388927,  0.34920842,  0.35240151,\n        0.17638227,  0.46377493,  0.3939198 ,  0.46448029,  0.34974532,\n        0.4091069 ,  0.2996696 ,  0.31868948,  0.27776093,  0.27969009,\n        0.31001004,  0.34651993,  0.36511498,  0.25641987,  0.36787472,\n        0.25061601,  0.43874015,  0.30907333,  0.30742187,  0.43356778,\n        0.37184625,  0.37781472,  0.38811771,  0.36018255,  0.32513911,\n        0.41765669,  0.32689887,  0.28030158,  0.39163757,  0.33158315,\n        0.3595052 ,  0.46889063,  0.32822815,  0.32566163,  0.33101464,\n        0.37216688,  0.39733423,  0.44800362,  0.40265194,  0.36828679,\n        0.3945686 ,  0.25542368,  0.35761989,  0.23298255,  0.35897608,\n        0.38835324,  0.35940801,  0.33920676,  0.38774871,  0.35665835,\n        0.40969949,  0.37855848,  0.26505381,  0.3750314 ,  0.3614608 ,\n        0.29583819,  0.387177  ,  0.45308406,  0.35631867,  0.3471497 ,\n        0.31944481,  0.40949886,  0.32453882,  0.27349772,  0.31247103,\n        0.28736743,  0.33053127,  0.28445865,  0.42163137,  0.39165334,\n        0.48125848,  0.39958453,  0.36121433,  0.25596448,  0.35028976,\n        0.37800471,  0.29054553,  0.39901677,  0.28566321,  0.40228394,\n        0.28094665,  0.38282782,  0.32080927,  0.36732028,  0.28021801,\n        0.43386441,  0.36566424,  0.17309174,  0.2864465 ,  0.48588328,\n        0.4379513 ,  0.31807606,  0.22276896,  0.3837975 ,  0.35437269,\n        0.41095687,  0.35536757,  0.36256703,  0.41053693,  0.19875665,\n        0.35931273,  0.34938392,  0.35938082,  0.29932014,  0.36026023,\n        0.29420832,  0.41583381,  0.41836997,  0.35236038,  0.36478763,\n        0.37422349,  0.42237656,  0.35491203,  0.38401865,  0.32478055,\n        0.39639871,  0.30754248,  0.28298515,  0.35355333,  0.38764711,\n        0.24149446,  0.44736186,  0.26846159,  0.30305692,  0.37937295,\n        0.35399136,  0.37436065,  0.48975852,  0.32763145,  0.35771297,\n        0.24457454,  0.43817467,  0.32318189,  0.40939673,  0.30904956,\n        0.4058264 ,  0.31548055,  0.34778588,  0.27216749,  0.35959523,\n        0.35308367,  0.39804884,  0.31123224,  0.37074699,  0.31098905,\n        0.32787846,  0.22225314,  0.36189398,  0.38569857,  0.40244394,\n        0.37431475,  0.37646296,  0.30050867,  0.38853535,  0.26827023,\n        0.30120785,  0.3924199 ,  0.31654751,  0.39963708,  0.35394093,\n        0.37008765,  0.34325678,  0.46986591,  0.37089893,  0.37767187,\n        0.38052207,  0.21070825,  0.26081478,  0.26066993,  0.43560227,\n        0.47730778,  0.26494492,  0.44390498,  0.31396022,  0.46117816,\n        0.22760724,  0.45842222,  0.33492516,  0.46903585,  0.32518185,\n        0.41382035,  0.33071743,  0.32781117,  0.42697473,  0.29922905,\n        0.39353705,  0.34316083,  0.45248865,  0.31556241,  0.29688595,\n        0.19042043,  0.30801811,  0.43209191,  0.38171683,  0.36874542,\n        0.33110284,  0.43408485,  0.35350848,  0.41717183,  0.3795025 ,\n        0.33800292,  0.40788355,  0.3487189 ,  0.36334129,  0.36773897,\n        0.35716652,  0.31958933,  0.35229354,  0.38192844,  0.131064  ,\n        0.46945613,  0.50452416,  0.40170409,  0.33910162,  0.2446623 ,\n        0.47178829,  0.35272988,  0.47105281,  0.32434132,  0.29563633,\n        0.3489984 ,  0.4313384 ,  0.26458517,  0.28972957,  0.37328946,\n        0.3513375 ,  0.4182225 ,  0.40488257,  0.35984623,  0.35157567,\n        0.36490789,  0.36145163,  0.36219304,  0.31249589,  0.31993087,\n        0.34506224,  0.33977483,  0.43941594,  0.34300712,  0.11407017,\n        0.55013731,  0.36031895,  0.35651344,  0.3536409 ,  0.39214983,\n        0.35685251,  0.32191647,  0.42147809,  0.28167082,  0.39399796,\n        0.38954763,  0.29320292,  0.28894349,  0.367458  ,  0.33458904,\n        0.38906359,  0.41711617,  0.46963755,  0.23272096,  0.29462233,\n        0.39546486,  0.4524549 ,  0.31592476,  0.45280139,  0.33135251,\n        0.36175169,  0.36998016,  0.35009763,  0.34600311,  0.40323174,\n        0.22948486,  0.29787165,  0.47074459,  0.44792308,  0.43539402,\n        0.40254804,  0.2987047 ,  0.374543  ,  0.37842883,  0.40753657,\n        0.34595611])</pre>"},{"location":"notebooks/intro_dplpy/#example-running-dplpy-with-jupyter-notebook","title":"Example: Running DplPy with Jupyter Notebook\u00b6","text":""},{"location":"notebooks/itrdb/","title":"ITRDB API","text":"In\u00a0[77]: Copied! <pre>!mamba install -n dplpy -c conda-forge folium tabulate requests -y\n</pre> !mamba install -n dplpy -c conda-forge folium tabulate requests -y <pre>\n                  __    __    __    __\n                 /  \\  /  \\  /  \\  /  \\\n                /    \\/    \\/    \\/    \\\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588/  /\u2588\u2588/  /\u2588\u2588/  /\u2588\u2588/  /\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n              /  / \\   / \\   / \\   / \\  \\____\n             /  /   \\_/   \\_/   \\_/   \\    o \\__,\n            / _/                       \\_____/  `\n            |/\n        \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557\n        \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n        \u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n        \u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n        \u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\n        \u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\n\n        mamba (1.4.2) supported by @QuantStack\n\n        GitHub:  https://github.com/mamba-org/mamba\n        Twitter: https://twitter.com/QuantStack\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\n\nLooking for: ['folium', 'tabulate', 'requests']\n\n[+] 0.0s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.0s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.0s[+] 0.1s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.1s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.1s[+] 0.2s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.2s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.2s[+] 0.3s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.3s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.3s[+] 0.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.4s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0.0 B /  ??.?MB @  ??.?MB/s  0.4s[+] 0.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 834.8kB /  ??.?MB @   1.7MB/s  0.5s\nconda-forge/noarch   \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501 959.1kB /  ??.?MB @   2.0MB/s  0.5s[+] 0.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   1.7MB /  ??.?MB @   2.9MB/s  0.6s\nconda-forge/noarch   \u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501   2.0MB /  ??.?MB @   3.4MB/s  0.6s[+] 0.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   2.5MB /  ??.?MB @   3.7MB/s  0.7s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501   2.9MB /  ??.?MB @   4.2MB/s  0.7s[+] 0.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   3.4MB /  ??.?MB @   4.3MB/s  0.8s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   3.9MB /  ??.?MB @   4.9MB/s  0.8s[+] 0.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   4.0MB /  ??.?MB @   4.5MB/s  0.9s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   4.8MB /  ??.?MB @   5.4MB/s  0.9s[+] 1.0s\nconda-forge/linux-64 \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501   4.8MB /  ??.?MB @   4.8MB/s  1.0s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   5.7MB /  ??.?MB @   5.7MB/s  1.0s[+] 1.1s\nconda-forge/linux-64 \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501   5.7MB /  ??.?MB @   5.3MB/s  1.1s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   6.6MB /  ??.?MB @   6.1MB/s  1.1s[+] 1.2s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501   6.5MB /  ??.?MB @   5.5MB/s  1.2s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   7.6MB /  ??.?MB @   6.4MB/s  1.2s[+] 1.3s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   7.3MB /  ??.?MB @   5.7MB/s  1.3s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   8.5MB /  ??.?MB @   6.5MB/s  1.3s[+] 1.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   8.3MB /  ??.?MB @   5.9MB/s  1.4s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   9.5MB /  ??.?MB @   6.8MB/s  1.4s[+] 1.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   9.2MB /  ??.?MB @   6.1MB/s  1.5s\nconda-forge/noarch   \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501  10.4MB /  ??.?MB @   6.9MB/s  1.5s[+] 1.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  10.0MB /  ??.?MB @   6.3MB/s  1.6s\nconda-forge/noarch   \u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501  10.9MB /  ??.?MB @   7.1MB/s  1.6s[+] 1.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  10.3MB /  ??.?MB @   6.3MB/s  1.7s\nconda-forge/noarch   \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501  11.9MB /  ??.?MB @   7.2MB/s  1.7s[+] 1.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  11.3MB /  ??.?MB @   6.5MB/s  1.8s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501  12.7MB /  ??.?MB @   7.3MB/s  1.8s[+] 1.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  12.2MB /  ??.?MB @   6.6MB/s  1.9s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  13.6MB /  ??.?MB @   7.4MB/s  1.9s[+] 2.0s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501  12.7MB /  ??.?MB @   6.5MB/s  2.0s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  14.4MB /  ??.?MB @   7.4MB/s  2.0s[+] 2.1s\nconda-forge/linux-64 \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501  13.1MB @   6.5MB/s             2.1s\nconda-forge/noarch   \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  15.2MB @   7.4MB/s Finalizing  2.1sconda-forge/noarch                                 @   7.4MB/s  2.2s\n[+] 2.2s\nconda-forge/linux-64 \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501  13.1MB /  ??.?MB @   6.5MB/s  2.2s[+] 2.3s\nconda-forge/linux-64 \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501  14.9MB /  ??.?MB @   6.6MB/s  2.3s[+] 2.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501  15.7MB /  ??.?MB @   6.7MB/s  2.4s[+] 2.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  16.5MB /  ??.?MB @   6.7MB/s  2.5s[+] 2.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  17.4MB /  ??.?MB @   6.8MB/s  2.6s[+] 2.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  18.4MB /  ??.?MB @   6.9MB/s  2.7s[+] 2.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  19.2MB /  ??.?MB @   7.0MB/s  2.8s[+] 2.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  20.2MB /  ??.?MB @   7.0MB/s  2.9s[+] 3.0s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  20.9MB /  ??.?MB @   7.0MB/s  3.0s[+] 3.1s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  21.5MB /  ??.?MB @   7.0MB/s  3.1s[+] 3.2s\nconda-forge/linux-64 \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501  22.3MB /  ??.?MB @   7.0MB/s  3.2s[+] 3.3s\nconda-forge/linux-64 \u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501  22.7MB /  ??.?MB @   7.0MB/s  3.3s[+] 3.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501  23.2MB /  ??.?MB @   6.9MB/s  3.4s[+] 3.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501  24.7MB /  ??.?MB @   7.1MB/s  3.5s[+] 3.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  25.6MB /  ??.?MB @   7.2MB/s  3.6s[+] 3.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  26.5MB /  ??.?MB @   7.2MB/s  3.7s[+] 3.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  27.4MB /  ??.?MB @   7.3MB/s  3.8s[+] 3.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  28.3MB /  ??.?MB @   7.3MB/s  3.9s[+] 4.0s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  29.3MB /  ??.?MB @   7.4MB/s  4.0s[+] 4.1s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  30.3MB /  ??.?MB @   7.4MB/s  4.1s[+] 4.2s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  31.1MB /  ??.?MB @   7.5MB/s  4.2s[+] 4.3s\nconda-forge/linux-64 \u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501  32.0MB /  ??.?MB @   7.5MB/s  4.3s[+] 4.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501  32.8MB /  ??.?MB @   7.5MB/s  4.4s[+] 4.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501  33.6MB /  ??.?MB @   7.5MB/s  4.5s[+] 4.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  34.4MB /  ??.?MB @   7.5MB/s  4.6s[+] 4.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  35.4MB /  ??.?MB @   7.6MB/s  4.7s[+] 4.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2578\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  36.3MB /  ??.?MB @   7.6MB/s  4.8s[+] 4.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Downloaded  4.9s[+] 5.0s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.0s[+] 5.1s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.1s[+] 5.2s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.2s[+] 5.3s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.3s[+] 5.4s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.4s[+] 5.5s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.5s[+] 5.6s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.6s[+] 5.7s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.7s[+] 5.8s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.8s[+] 5.9s\nconda-forge/linux-64 \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501  37.2MB @   7.6MB/s Finalizing  5.9s[+] 6.0s\nconda-forge/linux-64                               @   7.6MB/s  6.0s\n\nPinned packages:\n  - python 3.12.*\n\n\nTransaction\n\n  Prefix: /opt/conda/envs/dplpy\n\n  All requested packages already installed\n\n</pre> In\u00a0[78]: Copied! <pre># import Python libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport json\nimport requests\nimport pandas as pd\n</pre> # import Python libraries import matplotlib.pyplot as plt import numpy as np import json import requests import pandas as pd In\u00a0[79]: Copied! <pre># Call the NOAA API to get tree ring data \napi_base = \"https://www.ncei.noaa.gov/access/paleo-search/study/search.json?\"\n</pre> # Call the NOAA API to get tree ring data  api_base = \"https://www.ncei.noaa.gov/access/paleo-search/study/search.json?\" In\u00a0[80]: Copied! <pre># build the request string for the API \n# data type is tree ring data (18), species is ponderosa pine (PIPO), limit to 5 records\n# to limit the results to headersOnly, set headersOnly to true\nreq_params =\"dataPublisher=NOAA&amp;dataTypeId=18&amp;species=PIPO&amp;limit=5&amp;headersOnly=true\"\nreq_str = api_base + req_params\n\n# make the request\nresponse = requests.get(req_str)\n\n# Convert the response to JSON\ndata = response.json()\n\n# Pretty-print the JSON data to debug\nprint(json.dumps(data, indent=4))\n</pre>  # build the request string for the API  # data type is tree ring data (18), species is ponderosa pine (PIPO), limit to 5 records # to limit the results to headersOnly, set headersOnly to true req_params =\"dataPublisher=NOAA&amp;dataTypeId=18&amp;species=PIPO&amp;limit=5&amp;headersOnly=true\" req_str = api_base + req_params  # make the request response = requests.get(req_str)  # Convert the response to JSON data = response.json()  # Pretty-print the JSON data to debug print(json.dumps(data, indent=4)) <pre>{\n    \"study\": [\n        {\n            \"xmlId\": \"64380\",\n            \"NOAAStudyId\": \"26070\",\n            \"studyName\": \"Azpeleta Taranc\\u00f3n fire data from Mistletoe Canyon, south central New Mexico - IMPD USMC-001\",\n            \"dataPublisher\": \"NOAA\",\n            \"dataType\": \"FIRE HISTORY\",\n            \"investigators\": \"Azpeleta Taranc\\u00f3n, A.; Fule, P.Z.; S\\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T.\",\n            \"onlineResourceLink\": \"https://www.ncei.noaa.gov/access/paleo-search/study/26070\",\n            \"primaryInvestigator\": \"Azpeleta Taranc\\u00f3n, A.\",\n            \"reconstruction\": \"N\",\n            \"contributionDate\": \"2019-02-04\"\n        },\n        {\n            \"xmlId\": \"64375\",\n            \"NOAAStudyId\": \"26071\",\n            \"studyName\": \"Azpeleta Taranc\\u00f3n fire data from Potato Patch NM, south central New Mexico - IMPD USPP-002\",\n            \"dataPublisher\": \"NOAA\",\n            \"dataType\": \"FIRE HISTORY\",\n            \"investigators\": \"Azpeleta Taranc\\u00f3n, A.; Fule, P.Z.; S\\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T.\",\n            \"onlineResourceLink\": \"https://www.ncei.noaa.gov/access/paleo-search/study/26071\",\n            \"primaryInvestigator\": \"Azpeleta Taranc\\u00f3n, A.\",\n            \"reconstruction\": \"N\",\n            \"contributionDate\": \"2019-02-04\"\n        },\n        {\n            \"xmlId\": \"64376\",\n            \"NOAAStudyId\": \"26073\",\n            \"studyName\": \"Azpeleta Taranc\\u00f3n fire data from Snow Canyon, south central New Mexico - IMPD USSC-001\",\n            \"dataPublisher\": \"NOAA\",\n            \"dataType\": \"FIRE HISTORY\",\n            \"investigators\": \"Azpeleta Taranc\\u00f3n, A.; Fule, P.Z.; S\\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T.\",\n            \"onlineResourceLink\": \"https://www.ncei.noaa.gov/access/paleo-search/study/26073\",\n            \"primaryInvestigator\": \"Azpeleta Taranc\\u00f3n, A.\",\n            \"reconstruction\": \"N\",\n            \"contributionDate\": \"2019-02-04\"\n        },\n        {\n            \"xmlId\": \"64374\",\n            \"NOAAStudyId\": \"26072\",\n            \"studyName\": \"Azpeleta Taranc\\u00f3n fire data from Solon, south central New Mexico - IMPD USS--001\",\n            \"dataPublisher\": \"NOAA\",\n            \"dataType\": \"FIRE HISTORY\",\n            \"investigators\": \"Azpeleta Taranc\\u00f3n, A.; Fule, P.Z.; S\\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T.\",\n            \"onlineResourceLink\": \"https://www.ncei.noaa.gov/access/paleo-search/study/26072\",\n            \"primaryInvestigator\": \"Azpeleta Taranc\\u00f3n, A.\",\n            \"reconstruction\": \"N\",\n            \"contributionDate\": \"2019-02-04\"\n        },\n        {\n            \"xmlId\": \"64381\",\n            \"NOAAStudyId\": \"26074\",\n            \"studyName\": \"Azpeleta Taranc\\u00f3n fire data from Turkey Canyon, south central New Mexico - IMPD USTC-002\",\n            \"dataPublisher\": \"NOAA\",\n            \"dataType\": \"FIRE HISTORY\",\n            \"investigators\": \"Azpeleta Taranc\\u00f3n, A.; Fule, P.Z.; S\\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T.\",\n            \"onlineResourceLink\": \"https://www.ncei.noaa.gov/access/paleo-search/study/26074\",\n            \"primaryInvestigator\": \"Azpeleta Taranc\\u00f3n, A.\",\n            \"reconstruction\": \"N\",\n            \"contributionDate\": \"2019-02-04\"\n        }\n    ]\n}\n</pre> <p>We want to view the data here, so we use <code>pandas</code> to create a DataFrame and then print it in a MarkDown format</p> In\u00a0[81]: Copied! <pre># Convert the 'study' data to a pandas DataFrame\ndf = pd.DataFrame(data['study'])\n# view the data as markdown\n\nprint(df.to_markdown())\n# export the markdown dataframe as rendered text\nwith open('tree-ring-data.md', 'w') as f:\n    f.write(df.to_markdown())\n\n# view the markdown file in notebook as a new MarkDown cell\n</pre> # Convert the 'study' data to a pandas DataFrame df = pd.DataFrame(data['study']) # view the data as markdown  print(df.to_markdown()) # export the markdown dataframe as rendered text with open('tree-ring-data.md', 'w') as f:     f.write(df.to_markdown())  # view the markdown file in notebook as a new MarkDown cell  <pre>|    |   xmlId |   NOAAStudyId | studyName                                                                                   | dataPublisher   | dataType     | investigators                                                                    | onlineResourceLink                                        | primaryInvestigator   | reconstruction   | contributionDate   |\n|---:|--------:|--------------:|:--------------------------------------------------------------------------------------------|:----------------|:-------------|:---------------------------------------------------------------------------------|:----------------------------------------------------------|:----------------------|:-----------------|:-------------------|\n|  0 |   64380 |         26070 | Azpeleta Taranc\u00f3n fire data from Mistletoe Canyon, south central New Mexico - IMPD USMC-001 | NOAA            | FIRE HISTORY | Azpeleta Taranc\u00f3n, A.; Fule, P.Z.; S\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T. | https://www.ncei.noaa.gov/access/paleo-search/study/26070 | Azpeleta Taranc\u00f3n, A. | N                | 2019-02-04         |\n|  1 |   64375 |         26071 | Azpeleta Taranc\u00f3n fire data from Potato Patch NM, south central New Mexico - IMPD USPP-002  | NOAA            | FIRE HISTORY | Azpeleta Taranc\u00f3n, A.; Fule, P.Z.; S\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T. | https://www.ncei.noaa.gov/access/paleo-search/study/26071 | Azpeleta Taranc\u00f3n, A. | N                | 2019-02-04         |\n|  2 |   64376 |         26073 | Azpeleta Taranc\u00f3n fire data from Snow Canyon, south central New Mexico - IMPD USSC-001      | NOAA            | FIRE HISTORY | Azpeleta Taranc\u00f3n, A.; Fule, P.Z.; S\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T. | https://www.ncei.noaa.gov/access/paleo-search/study/26073 | Azpeleta Taranc\u00f3n, A. | N                | 2019-02-04         |\n|  3 |   64374 |         26072 | Azpeleta Taranc\u00f3n fire data from Solon, south central New Mexico - IMPD USS--001            | NOAA            | FIRE HISTORY | Azpeleta Taranc\u00f3n, A.; Fule, P.Z.; S\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T. | https://www.ncei.noaa.gov/access/paleo-search/study/26072 | Azpeleta Taranc\u00f3n, A. | N                | 2019-02-04         |\n|  4 |   64381 |         26074 | Azpeleta Taranc\u00f3n fire data from Turkey Canyon, south central New Mexico - IMPD USTC-002    | NOAA            | FIRE HISTORY | Azpeleta Taranc\u00f3n, A.; Fule, P.Z.; S\u00e1nchez Meador, A.J.; Kim, Y.-S.; Padilla, T. | https://www.ncei.noaa.gov/access/paleo-search/study/26074 | Azpeleta Taranc\u00f3n, A. | N                | 2019-02-04         |\n</pre> In\u00a0[82]: Copied! <pre># rebuild the request string for the API \n# data type is tree ring data (18), species is ponderosa pine (PIPO), limit to 500 records\n# to limit the results to headersOnly, set headersOnly to true\nreq_params =\"dataPublisher=NOAA&amp;dataTypeId=18&amp;species=PIPO&amp;limit=500\"\nreq_str = api_base + req_params\n\n# make the request\nresponse = requests.get(req_str)\n\n# Convert the response to JSON\ndata = response.json()\n</pre> # rebuild the request string for the API  # data type is tree ring data (18), species is ponderosa pine (PIPO), limit to 500 records # to limit the results to headersOnly, set headersOnly to true req_params =\"dataPublisher=NOAA&amp;dataTypeId=18&amp;species=PIPO&amp;limit=500\" req_str = api_base + req_params  # make the request response = requests.get(req_str)  # Convert the response to JSON data = response.json() In\u00a0[83]: Copied! <pre># import packages for Leaflet\nimport folium\n\n# Create a folium Map centered on the United States\nm = folium.Map(location=[37.8, -96], zoom_start=4)\n\n# Assuming that 'data' is your response data\nfor study in data['study']:\n    for site in study['site']:\n        lat = float(site['geo']['geometry']['coordinates'][0])\n        lon = float(site['geo']['geometry']['coordinates'][1])\n        # Create a popup with the site name\n        popup_text = f\"&lt;a href='{study['doi']}'&gt;url: {study['doi']}&lt;/a&gt;&lt;br&gt;&lt;a&gt;Site Name: &lt;/a&gt;{site['siteName']}&lt;br&gt;&lt;a&gt;Site ID: &lt;/a&gt;{site['NOAASiteId']}&lt;br&gt;&lt;/a&gt;\"\n        \n        # Add links to any rwl files\n        for file in site['paleoData'][0]['dataFile']:\n            link = file['fileUrl']\n            if link.endswith('.rwl'):\n                # click to copy the URL to the clipboard\n                popup_text += f\"&lt;br&gt;&lt;a href='{link}'&gt;view rwl file&lt;/a&gt;\"\n                \n        # Add links to any csv files\n        for file in site['paleoData'][0]['dataFile']:\n            link = file['fileUrl']\n            if link.endswith('.csv'):\n                popup_text += f\"&lt;br&gt;&lt;a href='{link}'&gt;Link to csv file&lt;/a&gt;\"\n        \n        # Add links to any PDF files\n        for file in site['paleoData'][0]['dataFile']:\n            link = file['fileUrl']\n            if link.endswith('.pdf'):\n                popup_text += f\"&lt;br&gt;&lt;a href='{link}'&gt;Link to PDF file&lt;/a&gt;\"\n        \n        # Add links to any figure files\n        for file in site['paleoData'][0]['dataFile']:\n            link = file['fileUrl']\n            if link.endswith('.png'):\n                popup_text += f\"&lt;br&gt;&lt;a href='{link}'&gt;Link to figure file&lt;/a&gt;\"\n        \n        popup = folium.Popup(popup_text, max_width=250)\n        folium.Marker([lat, lon], popup=popup).add_to(m)\n\n# Display the Map\nm\n</pre> # import packages for Leaflet import folium  # Create a folium Map centered on the United States m = folium.Map(location=[37.8, -96], zoom_start=4)  # Assuming that 'data' is your response data for study in data['study']:     for site in study['site']:         lat = float(site['geo']['geometry']['coordinates'][0])         lon = float(site['geo']['geometry']['coordinates'][1])         # Create a popup with the site name         popup_text = f\"url: {study['doi']}Site Name: {site['siteName']}Site ID: {site['NOAASiteId']}\"                  # Add links to any rwl files         for file in site['paleoData'][0]['dataFile']:             link = file['fileUrl']             if link.endswith('.rwl'):                 # click to copy the URL to the clipboard                 popup_text += f\"view rwl file\"                          # Add links to any csv files         for file in site['paleoData'][0]['dataFile']:             link = file['fileUrl']             if link.endswith('.csv'):                 popup_text += f\"Link to csv file\"                  # Add links to any PDF files         for file in site['paleoData'][0]['dataFile']:             link = file['fileUrl']             if link.endswith('.pdf'):                 popup_text += f\"Link to PDF file\"                  # Add links to any figure files         for file in site['paleoData'][0]['dataFile']:             link = file['fileUrl']             if link.endswith('.png'):                 popup_text += f\"Link to figure file\"                  popup = folium.Popup(popup_text, max_width=250)         folium.Marker([lat, lon], popup=popup).add_to(m)  # Display the Map m Out[83]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[85]: Copied! <pre>from datetime import datetime\nsave_map = input(\"Do you want to save the map.html locally? (y/n): \")\nif save_map == 'y':\n    # ask what name to save the map as\n    map_name = input(\"What do you want to name the map? \")\n    m.save(f'map_{map_name}.html')\n    # if nothing entered\n    if map_name == '':\n        # Get the current date and time\n        now = datetime.now()\n        # Format the date and time as a string\n        map_name = now.strftime(\"%Y%m%d_%H%M%S\")\n        # Use the timestamp in the filename\n        m.save(f'map_{map_name}.html')\nelse:\n    print('not saved')\n</pre> from datetime import datetime save_map = input(\"Do you want to save the map.html locally? (y/n): \") if save_map == 'y':     # ask what name to save the map as     map_name = input(\"What do you want to name the map? \")     m.save(f'map_{map_name}.html')     # if nothing entered     if map_name == '':         # Get the current date and time         now = datetime.now()         # Format the date and time as a string         map_name = now.strftime(\"%Y%m%d_%H%M%S\")         # Use the timestamp in the filename         m.save(f'map_{map_name}.html') else:     print('not saved') <pre>not saved\n</pre> In\u00a0[86]: Copied! <pre># download a .rwl file directly from ITRDB website\n\nimport requests\n\ndef download_rwl_file(url, file_path):\n    \"\"\"\n    Download a .rwl file from a given URL and save it locally.\n\n    :param url: URL of the .rwl file\n    :param file_path: Local path to save the file\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Check if the request was successful\n\n        with open(file_path, 'wb') as file:\n            file.write(response.content)\n        print(f\"File downloaded successfully: {file_path}\")\n    except requests.RequestException as e:\n        print(f\"Error downloading the file: {e}\")\n</pre> # download a .rwl file directly from ITRDB website  import requests  def download_rwl_file(url, file_path):     \"\"\"     Download a .rwl file from a given URL and save it locally.      :param url: URL of the .rwl file     :param file_path: Local path to save the file     \"\"\"     try:         response = requests.get(url)         response.raise_for_status()  # Check if the request was successful          with open(file_path, 'wb') as file:             file.write(response.content)         print(f\"File downloaded successfully: {file_path}\")     except requests.RequestException as e:         print(f\"Error downloading the file: {e}\") In\u00a0[87]: Copied! <pre># Example Usage\nurl = \"https://www.ncei.noaa.gov/pub/data/paleo/treering/measurements/northamerica/usa/az547.rwl\"\nfile_path = \"az547.rwl\"  # Replace with your desired path\ndownload_rwl_file(url, file_path)\n</pre> # Example Usage url = \"https://www.ncei.noaa.gov/pub/data/paleo/treering/measurements/northamerica/usa/az547.rwl\" file_path = \"az547.rwl\"  # Replace with your desired path download_rwl_file(url, file_path) <pre>File downloaded successfully: az547.rwl\n</pre> In\u00a0[88]: Copied! <pre>import os\nimport dplpy as dpl\n\n# set the working directory\nprint(\"Current Working Directory:\", os.getcwd())\n</pre> import os import dplpy as dpl  # set the working directory print(\"Current Working Directory:\", os.getcwd()) <pre>Current Working Directory: /home/jovyan/data-store\n</pre> In\u00a0[89]: Copied! <pre>help(dpl.readers)\n</pre> help(dpl.readers) <pre>Help on function readers in module readers:\n\nreaders(filename: str, skip_lines=0, header=False)\n    Imports a common ring width data file\n\n    Extended Summary\n    ----------------\n    This function imports common ring width data files (.csv, .rwls) as arrays\n\n    Parameters\n    ----------\n    filename : str\n               a data file (.CSV or .RWL) or a pandas dataframe imported from dpl.readers().\n\n    Returns\n    -------\n    data : pandas dataframe\n\n    Examples\n    --------\n    &gt;&gt;&gt; import dplpy as dpl\n    &gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.csv\")\n    &gt;&gt;&gt; data = dpl.readers(\"../tests/data/csv/file.rwl\", header=True)\n\n    References\n    ----------\n    .. [1] https:/opendendro.org/dplpy-man/#readers\n\n</pre> In\u00a0[90]: Copied! <pre>data = dpl.readers(\"/home/jovyan/data-store/az547.rwl\", header=True)\n</pre> data = dpl.readers(\"/home/jovyan/data-store/az547.rwl\", header=True) <pre>\nAttempting to read input file: az547.rwl as .rwl format\n\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['WCP011', 'WCP012', 'WCP021', 'WCP022', 'WCP031', 'WCP032', 'WCP041', 'WCP042', 'WCP051', 'WCP052', 'WCP061', 'WCP062', 'WCP071', 'WCP072', 'WCP081', 'WCP082', 'WCP091', 'WCP092', 'WCP101', 'WCP111', 'WCP112'] \n\n</pre> In\u00a0[91]: Copied! <pre>dpl.summary(data)\n</pre> dpl.summary(data) Out[91]: WCP011 WCP012 WCP021 WCP022 WCP031 WCP032 WCP041 WCP042 WCP051 WCP052 ... WCP062 WCP071 WCP072 WCP081 WCP082 WCP091 WCP092 WCP101 WCP111 WCP112 count 367.000000 387.000000 574.000000 568.000000 270.000000 268.000000 377.000000 378.000000 378.000000 379.000000 ... 460.000000 367.000000 368.000000 310.000000 308.000000 308.000000 305.000000 371.000000 366.000000 383.000000 mean 0.889591 1.119612 0.569948 0.518486 1.027111 1.139478 0.982414 0.948386 0.830873 0.875831 ... 0.583478 0.946322 1.052201 1.117097 1.098019 1.198247 1.120295 0.842911 1.006284 1.016345 std 0.726893 0.782691 0.460331 0.313141 0.834130 0.826676 0.970882 0.694060 0.801188 0.618304 ... 0.613571 0.687315 0.749256 0.564160 0.652438 0.748183 0.707423 0.870879 0.690556 0.665793 min 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 ... 0.000000 0.020000 0.050000 0.130000 0.110000 0.000000 0.000000 0.000000 0.000000 0.000000 25% 0.375000 0.620000 0.282500 0.307500 0.420000 0.517500 0.380000 0.472500 0.320000 0.465000 ... 0.170000 0.440000 0.430000 0.660000 0.557500 0.657500 0.640000 0.190000 0.530000 0.545000 50% 0.670000 0.930000 0.480000 0.470000 0.705000 0.830000 0.640000 0.795000 0.540000 0.730000 ... 0.385000 0.690000 0.780000 0.980000 0.960000 0.955000 0.890000 0.360000 0.840000 0.870000 75% 1.160000 1.380000 0.750000 0.690000 1.455000 1.672500 1.320000 1.227500 1.080000 1.035000 ... 0.762500 1.220000 1.542500 1.537500 1.592500 1.597500 1.380000 1.350000 1.267500 1.300000 max 3.450000 4.480000 4.870000 2.040000 4.150000 3.840000 5.760000 3.800000 3.760000 3.210000 ... 3.300000 3.100000 3.250000 3.250000 2.910000 3.530000 3.740000 3.670000 3.780000 4.350000 <p>8 rows \u00d7 21 columns</p> In\u00a0[92]: Copied! <pre>dpl.detrend(data[\"WCP011\"])\n</pre> dpl.detrend(data[\"WCP011\"]) Out[92]: <pre>1621    1.458716\n1622    1.233723\n1623    0.719140\n1624    0.366121\n1625    0.944886\n          ...   \n1983    1.431906\n1984    0.832821\n1985    1.838013\n1986    1.168667\n1987    1.274638\nName: WCP011, Length: 367, dtype: float64</pre> In\u00a0[93]: Copied! <pre>dpl.autoreg(data[\"WCP011\"], 20)\n</pre> dpl.autoreg(data[\"WCP011\"], 20) Out[93]: <pre>const         0.058818\nWCP011.L1     0.370037\nWCP011.L2     0.270136\nWCP011.L3    -0.047990\nWCP011.L4     0.016080\nWCP011.L5    -0.009716\nWCP011.L6     0.107719\nWCP011.L7    -0.028582\nWCP011.L8    -0.003267\nWCP011.L9     0.065848\nWCP011.L10   -0.072174\nWCP011.L11   -0.035382\nWCP011.L12    0.096421\nWCP011.L13    0.031105\nWCP011.L14   -0.046085\nWCP011.L15    0.132907\nWCP011.L16    0.034036\nWCP011.L17   -0.135831\nWCP011.L18    0.149418\ndtype: float64</pre> In\u00a0[94]: Copied! <pre>dpl.plot(data,type=\"spag\")\n</pre> dpl.plot(data,type=\"spag\") In\u00a0[\u00a0]: Copied! <pre>dpl.xdate(data, prewhiten=True, corr=\"Spearman\", slide_period=50,bin_floor=100, p_val=0.05, show_flags=True)\n</pre> dpl.xdate(data, prewhiten=True, corr=\"Spearman\", slide_period=50,bin_floor=100, p_val=0.05, show_flags=True) <pre>Flags for WCP022\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1525-1574   -6 -0.05  0.07 -0.14 -0.00  0.38  0.00 -0.29  0.05  0.16  0.13  0.27  0.05 -0.35 -0.01  0.01 -0.05  0.05 -0.14  0.02 -0.24  0.08\n\n</pre> In\u00a0[\u00a0]: Copied! <pre>dpl.xdate_plot(data)\n</pre> dpl.xdate_plot(data) In\u00a0[\u00a0]: Copied! <pre>df_rwi = dpl.detrend(data, fit=\"spline\", period=50, method=\"residual\", plot=True)\n</pre> df_rwi = dpl.detrend(data, fit=\"spline\", period=50, method=\"residual\", plot=True)  In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/itrdb/#ncei-paleo-database-api","title":"NCEI Paleo Database API\u00b6","text":""},{"location":"notebooks/itrdb/#about","title":"About\u00b6","text":"<p>The NCEI Paleo Web Service is searchable via its web interface:https://www.ncei.noaa.gov/access/paleo-search/</p> <p>Here we are using its API: https://www.ncei.noaa.gov/access/paleo-search/api</p> <p>Specifically, we are interested in Tree Ring Data</p>"},{"location":"notebooks/itrdb/#tutorial-1-using-python-to-access-the-api-for-tree-ring-rwl-data","title":"Tutorial 1: Using Python to access the API for tree ring <code>.rwl</code> data\u00b6","text":""},{"location":"notebooks/itrdb/#step-1-activatecreate-a-python-environment","title":"Step 1: Activate/Create a Python environment\u00b6","text":"<p>First, you need to import the necessary libraries in Python. The most common ones used for API calls are <code>requests</code> for making HTTP requests and <code>json</code> for handling JSON data.</p> <p>We also want to plot the data using <code>maplotlib</code>, <code>numpy</code>, and <code>pandas</code> which are all core libraries for scientific Python.</p> <p>Later, we will use <code>fiona</code> and Leaflet maps to visualize the site locations.</p>"},{"location":"notebooks/itrdb/#step-2-set-the-base-url-for-the-api-as-api_base","title":"Step 2: Set the base url for the API as <code>api_base</code>\u00b6","text":"<p>Define the base url to the NOAA Paleoclimate API, this URL is the starting point for all future requests.</p>"},{"location":"notebooks/itrdb/#step-3-search-via-api-for-tree-ring-datatypeid18-studies-of-raw-ring-width","title":"Step 3:  Search via API for tree ring (<code>dataTypeID=18</code>) studies of raw ring width.\u00b6","text":"<p>Returns pages of 10 studies at a time. Set this limit to avoid overwhelming the API with large requests.</p> <p>Results are returned in JSON format as a dict called \"data\".</p> <p>Note, when searching via the user interface, the API call used to retrieve results is displayed immediately above the search results and can be used to generate a \"req_str\" relevant to the use case.</p>"},{"location":"notebooks/itrdb/#request-the-entire-json-response","title":"Request the entire JSON response\u00b6","text":"<p>Now that we have previewed the API and are satisfied with the response, we are going to re-run the code from above, but this time, we want the entire response, not just the headers.</p> <p>Also, we are going to increase our <code>limit</code> request from <code>limit=10</code> to <code>limit=500</code> sites.</p> <p>Note: we have removed <code>&amp;headersOnly=true</code> from our <code>req_params</code>, the <code>api_base</code> request is unchanged.</p>"},{"location":"notebooks/itrdb/#viewing-the-api-output-on-a-map","title":"Viewing the API output on a map\u00b6","text":""},{"location":"notebooks/itrdb/#step-4-install-python-library-folium","title":"Step 4: install Python library <code>folium</code>\u00b6","text":"<p>We need to install <code>folium</code> maps and its required dependencies into our Python environment. This can be done by using an <code>environment.yml</code> (see provided example), or by installing on the fly using <code>conda</code>, <code>mamba</code>, or <code>pip</code></p> <p><code>mamba install -c conda-forge folium</code></p>"},{"location":"notebooks/itrdb/#step-5-plot-the-locations-of-the-api-results-on-an-interactive-map","title":"Step 5: Plot the locations of the API results on an interactive map\u00b6","text":"<p>Create a base folium map, in our example we are zoomed in and centered over North America.</p> <p>Next, we call the JSON <code>data</code> response from the API.</p> <p>The JSON contains the <code>geo</code> geometric coordinates of the study area and its point location</p> <p>In the map, we are tagging the <code>doi</code>, the Site Name and Site ID.</p> <p>Optionally, if the file has a <code>.rwl</code>, a <code>.pdf</code>, or <code>.png</code> fire history figure associated with it, we provide a hyperlink.</p> <p>On Mac OS X, press the command button \u2318 and click on the hyperlink to open in your browser.</p> <p>If you click the link directly it may open in the Notebook widget. To go back, just re-run the notebook cell</p>"},{"location":"notebooks/itrdb/#saving-the-map-for-later-use","title":"Saving the Map for later use\u00b6","text":"<p>Below is a script to save the map as <code>.html</code> to your computer</p>"},{"location":"notebooks/itrdb/#step-7-download-the-rwl-for-a-selected-site-using-the-siteid","title":"Step 7: Download the <code>.rwl</code> for a selected site using the <code>siteID</code>\u00b6","text":""},{"location":"notebooks/new/","title":"New","text":"In\u00a0[1]: Copied! <pre>import dplpy as dpl\nimport pandas as pd\n# Reading data from files\n\n# Reading from different formats produce same dataframe\nca533 = dpl.readers(\"../tests/data/rwl/ca533.rwl\")\nca533csv = dpl.readers(\"../tests/data/csv/ca533.csv\")\nprint(ca533.equals(ca533csv))\n\n# Can specify whether file has headers so reading is done appropriately\nca667 = dpl.readers(\"../tests/data/rwl/ca667.rwl\", header=True)\nprint(ca667)\n</pre> import dplpy as dpl import pandas as pd # Reading data from files  # Reading from different formats produce same dataframe ca533 = dpl.readers(\"../tests/data/rwl/ca533.rwl\") ca533csv = dpl.readers(\"../tests/data/csv/ca533.csv\") print(ca533.equals(ca533csv))  # Can specify whether file has headers so reading is done appropriately ca667 = dpl.readers(\"../tests/data/rwl/ca667.rwl\", header=True) print(ca667) <pre>\n\nAttempting to read input file: ca533.rwl as .rwl format\n\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['CAM011', 'CAM021', 'CAM031', 'CAM032', 'CAM041', 'CAM042', 'CAM051', 'CAM061', 'CAM062', 'CAM071', 'CAM072', 'CAM081', 'CAM082', 'CAM091', 'CAM092', 'CAM101', 'CAM102', 'CAM111', 'CAM112', 'CAM121', 'CAM122', 'CAM131', 'CAM132', 'CAM141', 'CAM151', 'CAM152', 'CAM161', 'CAM162', 'CAM171', 'CAM172', 'CAM181', 'CAM191', 'CAM201', 'CAM211'] \n\n\nAttempting to read input file: ca533.csv as .csv format\n\n\nSUCCESS!\nFile read as: .csv file\n\nSeries names:\n['CAM011', 'CAM021', 'CAM031', 'CAM032', 'CAM041', 'CAM042', 'CAM051', 'CAM061', 'CAM062', 'CAM071', 'CAM072', 'CAM081', 'CAM082', 'CAM091', 'CAM092', 'CAM101', 'CAM102', 'CAM111', 'CAM112', 'CAM121', 'CAM122', 'CAM131', 'CAM132', 'CAM141', 'CAM151', 'CAM152', 'CAM161', 'CAM162', 'CAM171', 'CAM172', 'CAM181', 'CAM191', 'CAM201', 'CAM211'] \n\nTrue\n\nAttempting to read input file: ca667.rwl as .rwl format\n\n\nSUCCESS!\nFile read as: .rwl file\n\nSeries names:\n['SS004B', 'SL009A', 'ST860B', 'SS024B', 'SL004B', 'SG067A', 'SN151A', 'SL166B', 'SS004A', 'SL166C', 'SS024A', 'SN157B', 'SL009E', 'ST846A', 'SS495A', 'SL495B', 'SL004C', 'SL005C', 'SL005A', 'SL017A', 'SL017B', 'ST833A', 'SS25B', 'SL018A', 'SL018B', 'SN150A', 'SS517', 'SL517A', 'SS495C', 'SL495C', 'ST145', 'ST847A', 'SL496A', 'SL496B', 'SL511A', 'SL511D', 'ST832A', 'SS025C', 'SS025A', 'ST842A', 'SL127A', 'SL486A', 'SN154B', 'SS026A', 'ST834A', 'SN151B', 'ST851A', 'SS030A', 'SL166A', 'SG063A', 'SS33X', 'SN154A', 'ST837B', 'ST849B', 'ST849A', 'SN152X', 'SL151A', 'SS151A', 'SG064A', 'SN150B', 'SS027A', 'SN155X', 'ST836C', 'SL271B', 'SS029A', 'ST836A', 'SS144A', 'SB030A', 'SL151B', 'SL271C', 'SS022X', 'SG066B', 'SG066A', 'SG063D', 'SL494A', 'SS32X', 'SL022A', 'SL022B', 'SS160A', 'SG063B', 'ST840A', 'SS282A', 'SS022A', 'ST835A', 'SG066D', 'SS292A', 'SG069A', 'SS324', 'SG097B', 'SB005A', 'SS282B', 'ST850A', 'SN156A', 'SG072A', 'SL241A', 'ST838A', 'SS35X', 'SG063C', 'SL241C', 'SL241B', 'SS355A', 'SG063E', 'SL492A', 'SHP172', 'SS140A', 'ST839', 'SS132A', 'SG070C', 'SG064C', 'SS148B', 'ST862A', 'SHP182', 'ST861A', 'SHP243', 'ST856A', 'SB004A', 'SHP193', 'SHP222', 'SL276C', 'SL476A', 'SHP213', 'SHP234', 'SHP242', 'SHP251', 'SL270A', 'SG068A', 'SHP244', 'SS148A', 'SHP231', 'SHP273', 'SL276A', 'SHP261', 'SHP272', 'SHP235', 'ST850B', 'ST855B', 'ST850C', 'SL490A', 'SL282A', 'SL276B', 'SL252B', 'SHP321', 'SL489A', 'SHP181', 'SHP275', 'SL468C', 'SL468D', 'SS46A', 'SL259D', 'ST844A', 'SHP274', 'SL441A', 'SL444A', 'SHP271', 'SS46B', 'SL281A', 'SHP151', 'SHP281', 'SL490B', 'ST855A', 'SHP291', 'SS137A', 'SL610C', 'SHP254', 'SHP341', 'SHP262', 'SL259E', 'SL259B', 'SL285B', 'ST853A', 'SHP361', 'ST854A', 'SHP022', 'SL605A', 'SL247A', 'SHP343', 'ST861B', 'SHP021', 'SHP142', 'SL485A', 'SL288A', 'SHP351', 'SHP255', 'Sn973a', 'SHP301', 'SHP263', 'SH959a', 'SHP131', 'SHP322', 'SL464A', 'SL288B', 'SB004C', 'SL446B', 'SL261A', 'SL269B', 'SHP256', 'SHP512', 'SH961a', 'SHP141', 'SHP423', 'SHP433', 'SH968A', 'SL111D', 'SH966A', 'SHP031', 'SHP051', 'SHP511', 'SH960A', 'SHP032', 'SL260B', 'SHP253', 'SH922A', 'SHO042', 'SL111C', 'SHP071', 'SH929a', 'SHP111', 'SHP431', 'SHP523', 'SHP041', 'SHP421', 'SH952a', 'SH922b', 'SH910B', 'SHP352', 'SH963A', 'SHP002', 'SHP331', 'SH964b', 'SHP332', 'SHP083', 'SH954A', 'SHP542', 'ST776B', 'SH907B', 'SH945a', 'SL446A', 'SHP121', 'SH933a', 'ST817A', 'SH918A', 'SH964a', 'SHP081', 'SL610A', 'SHP561', 'SHP001', 'SHP101', 'SH943A', 'ST776A', 'SH950b', 'ST768B', 'SHP062', 'SH910A', 'SHP091', 'SL283A', 'ST817B', 'SL283B', 'SH926A', 'ST768A', 'Sn975B', 'SH926B', 'SHP092', 'SH950a', 'SH919A', 'SL607B', 'SH955A', 'SH960B', 'SH935B', 'SH925B', 'SH919B', 'SHP551', 'SL108C', 'ST802A', 'SH937a', 'SH957c', 'ST770B', 'SH927a', 'ST977A', 'ST890A', 'SH907A', 'SH953B', 'SH901B', 'SH953A', 'ST770A', 'SH958c', 'SH935a', 'SH970B', 'ST814B', 'SH912B', 'SH969a', 'ST890B', 'SH912A', 'SH913A', 'SH948a', 'SL606A', 'SH922o', 'Sn973B', 'Sn973o', 'SH907o', 'ST977B', 'SH970A', 'SH913B', 'SH965b', 'ST891A', 'ST891B', 'SL605B', 'SH965a', 'SH958A', 'ST814A', 'Sn974b'] \n\n       SS004B  SL009A  ST860B  SS024B  SL004B  SG067A  SN151A  SL166B  SS004A  \\\nYear                                                                            \n-2649    0.68    0.28    0.43    0.47    0.64    0.40    0.69    0.56    0.62   \n-2648    0.63    0.38    0.45    0.43    0.51    0.22    0.73    0.46    0.50   \n-2647    0.47    0.30    0.36    0.16    0.33    0.16    0.43    0.36    0.36   \n-2646    0.62    0.33    0.45    0.31    0.68    0.29    0.61    0.46    0.67   \n-2645    0.51    0.44    0.42    0.21    0.55    0.21    0.45    0.53    0.67   \n...       ...     ...     ...     ...     ...     ...     ...     ...     ...   \n 2001     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n 2002     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n 2003     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n 2004     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n 2005     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n\n       SL166C  ...  SH970A  SH913B  SH965b  ST891A  ST891B  SL605B  SH965a  \\\nYear           ...                                                           \n-2649    0.40  ...     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n-2648    0.34  ...     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n-2647    0.25  ...     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n-2646    0.33  ...     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n-2645    0.36  ...     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n...       ...  ...     ...     ...     ...     ...     ...     ...     ...   \n 2001     NaN  ...   1.512   0.952   0.432    0.55    0.66     NaN     NaN   \n 2002     NaN  ...   1.226   0.628   0.070    0.67    0.55     NaN     NaN   \n 2003     NaN  ...   1.758   0.728   0.126    0.75    0.73     NaN     NaN   \n 2004     NaN  ...   2.122   0.828   0.214     NaN     NaN     NaN     NaN   \n 2005     NaN  ...   1.786   1.192   0.432     NaN     NaN     NaN     NaN   \n\n       SH958A  ST814A  Sn974b  \nYear                           \n-2649     NaN     NaN     NaN  \n-2648     NaN     NaN     NaN  \n-2647     NaN     NaN     NaN  \n-2646     NaN     NaN     NaN  \n-2645     NaN     NaN     NaN  \n...       ...     ...     ...  \n 2001   0.538    0.70   1.960  \n 2002   0.256    0.60   1.088  \n 2003   0.402    0.73   1.194  \n 2004   0.454     NaN   1.730  \n 2005   0.540     NaN   1.344  \n\n[4655 rows x 310 columns]\n</pre> In\u00a0[2]: Copied! <pre>print(\"Summary\\n\", dpl.summary(ca533), \"\\n\")\nprint(\"Statistics\\n\", dpl.stats(ca533), \"\\n\")\n</pre> print(\"Summary\\n\", dpl.summary(ca533), \"\\n\") print(\"Statistics\\n\", dpl.stats(ca533), \"\\n\") <pre>Summary\n            CAM011      CAM021      CAM031      CAM032      CAM041      CAM042  \\\ncount  454.000000  551.000000  628.000000  549.000000  301.000000  446.000000   \nmean     0.439581    0.424465    0.349156    0.293224    0.525648    0.439148   \nstd      0.221801    0.185397    0.213666    0.162930    0.222568    0.347705   \nmin      0.000000    0.050000    0.000000    0.000000    0.100000    0.070000   \n25%      0.290000    0.290000    0.180000    0.180000    0.350000    0.270000   \n50%      0.400000    0.400000    0.290000    0.260000    0.530000    0.360000   \n75%      0.540000    0.520000    0.510000    0.390000    0.680000    0.460000   \nmax      1.360000    1.110000    1.030000    0.850000    1.380000    3.030000   \n\n           CAM051      CAM061      CAM062      CAM071  ...      CAM151  \\\ncount  737.000000  627.000000  459.000000  947.000000  ...  749.000000   \nmean     0.273012    0.462281    0.441939    0.249071  ...    0.445648   \nstd      0.139691    0.201785    0.188389    0.109357  ...    0.272561   \nmin      0.000000    0.000000    0.000000    0.000000  ...    0.000000   \n25%      0.180000    0.335000    0.330000    0.180000  ...    0.240000   \n50%      0.250000    0.470000    0.450000    0.250000  ...    0.390000   \n75%      0.330000    0.600000    0.580000    0.320000  ...    0.610000   \nmax      1.320000    1.090000    0.920000    0.620000  ...    1.640000   \n\n           CAM152      CAM161       CAM162      CAM171      CAM172  \\\ncount  229.000000  504.000000  1000.000000  758.000000  797.000000   \nmean     0.533799    0.339464     0.396710    0.450264    0.482296   \nstd      0.194947    0.148916     0.184057    0.209848    0.249002   \nmin      0.060000    0.000000     0.000000    0.080000    0.080000   \n25%      0.410000    0.230000     0.260000    0.300000    0.310000   \n50%      0.520000    0.330000     0.370000    0.400000    0.420000   \n75%      0.660000    0.430000     0.510000    0.580000    0.590000   \nmax      1.250000    0.900000     1.040000    1.540000    1.980000   \n\n           CAM181      CAM191      CAM201       CAM211  \ncount  781.000000  791.000000  593.000000  1343.000000  \nmean     0.282638    0.366271    0.473929     0.356813  \nstd      0.148853    0.335788    0.180967     0.182086  \nmin      0.000000    0.000000    0.000000     0.000000  \n25%      0.170000    0.170000    0.350000     0.220000  \n50%      0.250000    0.250000    0.470000     0.340000  \n75%      0.380000    0.455000    0.580000     0.470000  \nmax      0.800000    2.540000    1.490000     1.100000  \n\n[8 rows x 34 columns] \n\nStatistics\n     series  first  last  year   mean  median  stdev   skew   gini    ar1\n1   CAM011   1530  1983   454  0.440    0.40  0.222  1.029  0.273  0.698\n2   CAM021   1433  1983   551  0.424    0.40  0.185  0.946  0.237  0.702\n3   CAM031   1356  1983   628  0.349    0.29  0.214  0.690  0.341  0.809\n4   CAM032   1435  1983   549  0.293    0.26  0.163  0.717  0.309  0.665\n5   CAM041   1683  1983   301  0.526    0.53  0.223  0.488  0.238  0.710\n6   CAM042   1538  1983   446  0.439    0.36  0.348  3.678  0.324  0.881\n7   CAM051   1247  1983   737  0.273    0.25  0.140  1.836  0.262  0.705\n8   CAM061   1357  1983   627  0.462    0.47  0.202 -0.111  0.247  0.510\n9   CAM062   1525  1983   459  0.442    0.45  0.188 -0.266  0.240  0.529\n10  CAM071   1037  1983   947  0.249    0.25  0.109  0.027  0.247  0.578\n11  CAM072   1114  1983   870  0.309    0.29  0.163  0.698  0.292  0.735\n12  CAM081   1081  1983   903  0.327    0.31  0.124  0.555  0.211  0.723\n13  CAM082    977  1983  1007  0.285    0.29  0.114  0.312  0.223  0.771\n14  CAM091   1460  1983   524  0.532    0.52  0.255  0.425  0.267  0.632\n15  CAM092   1591  1983   393  0.349    0.34  0.226  0.337  0.369  0.561\n16  CAM101   1727  1983   257  0.568    0.56  0.260  0.254  0.259  0.716\n17  CAM102   1665  1983   319  0.604    0.62  0.261  0.082  0.243  0.677\n18  CAM111   1446  1983   538  0.625    0.62  0.249  0.196  0.225  0.625\n19  CAM112   1471  1983   513  0.570    0.56  0.211  0.223  0.207  0.583\n20  CAM121   1000  1983   984  0.259    0.26  0.106  0.042  0.231  0.594\n21  CAM122   1000  1983   984  0.271    0.27  0.109  0.346  0.223  0.653\n22  CAM131    695  1970  1276  0.552    0.53  0.198  0.330  0.202  0.788\n23  CAM132    710  1232   523  0.397    0.38  0.148  0.871  0.203  0.810\n24  CAM141   1030  1970   941  0.627    0.60  0.204  0.695  0.177  0.746\n25  CAM151   1222  1970   749  0.446    0.39  0.273  1.068  0.332  0.765\n26  CAM152   1221  1449   229  0.534    0.52  0.195  0.297  0.203  0.695\n27  CAM161   1106  1609   504  0.339    0.33  0.149  0.633  0.243  0.794\n28  CAM162    971  1970  1000  0.397    0.37  0.184  0.647  0.259  0.840\n29  CAM171   1213  1970   758  0.450    0.40  0.210  1.250  0.250  0.799\n30  CAM172   1174  1970   797  0.482    0.42  0.249  1.622  0.268  0.847\n31  CAM181   1190  1970   781  0.283    0.25  0.149  0.706  0.293  0.805\n32  CAM191   1180  1970   791  0.366    0.25  0.336  2.359  0.429  0.876\n33  CAM201    990  1582   593  0.474    0.47  0.181  0.772  0.208  0.709\n34  CAM211    626  1968  1343  0.357    0.34  0.182  0.513  0.286  0.683 \n\n</pre> In\u00a0[3]: Copied! <pre>print(\"Report\")\ndpl.report(ca533)\n</pre> print(\"Report\") dpl.report(ca533) <pre>Report\nNumber of dated series: 34\nNumber of measurements: 23276\nAvg series length: 684.5882\nRange: 1358\nSpan: 626 - 1983\nMean (Std dev) series intercorrelation:\nMean (Std dev) AR1: 0.7122\n-------------\nYears with absent rings listed by series\n\n      CAM011 -- 1753 1782\n      CAM031 -- 1497 1500 1523 1533 1540 1542 1545 1578 1579 1580 1655 1668 1670 1681\n      CAM032 -- 1497 1523 1579 1654 1670 1681 1782\n      CAM051 -- 1475\n      CAM061 -- 1497 1523 1542 1545 1547 1579 1654 1655 1668 1670 1672 1782 1858 1960\n      CAM062 -- 1542 1545 1547 1548 1579 1654 1655 1670 1672 1782 1836 1857 1858 1929\n      CAM071 -- 1269 1497 1498 1523 1542 1547 1578 1579 1612 1655 1656 1668 1670 1672 1674 1690 1707 1708 1756 1782 1795 1820 1836 1845 1857 1858 1924 1948 1960\n      CAM072 -- 1218 1497 1498 1523 1533 1538 1542 1545 1546 1547 1571 1579 1580 1590 1654 1655 1668 1670 1672 1675 1690\n      CAM081 -- 1218 1336\n      CAM082 -- 1362 1858 1865\n      CAM091 -- 1655 1669 1670 1782 1858\n      CAM092 -- 1624 1654 1655 1670 1672 1675 1677 1690 1703 1705 1707 1708 1710 1733 1753 1756 1757 1774 1777 1781 1782 1783 1784 1795 1807 1824 1829 1836 1845 1857 1858 1899 1904 1929 1936 1961\n      CAM101 -- 1782 1783 1899 1929\n      CAM102 -- 1669 1690 1782 1858 1899 1929\n      CAM111 -- 1542\n      CAM112 -- 1542\n      CAM121 -- 1093 1218 1254 1361 1365 1460 1462 1468 1473 1475 1492 1497 1542 1544 1545 1547 1600 1899 1960\n      CAM122 -- 1117 1133 1147 1177 1218 1254 1361 1475 1497 1670\n      CAM131 -- 1361\n      CAM151 -- 1670 1703\n      CAM161 -- 1523\n      CAM162 -- 1618 1624 1641\n      CAM181 -- 1450 1523\n      CAM191 -- 1475 1497 1523 1533 1542 1558 1571 1578 1618 1655 1668 1670 1675 1677 1690 1705 1777 1929\n      CAM201 -- 1523\n      CAM211 -- 645 762 809 847 924 957 1014 1118 1123 1133 1147 1189 1350 1384 1468 1571 1641\n-------------\nYears with internal NA values listed by series\n</pre> In\u00a0[5]: Copied! <pre>dpl.plot(ca533, type=\"seg\")\ndpl.plot(ca533, type=\"spag\")\n</pre> dpl.plot(ca533, type=\"seg\") dpl.plot(ca533, type=\"spag\") In\u00a0[4]: Copied! <pre>dpl.plot(ca533, type=\"seg\")\ndpl.plot(ca533, type=\"spag\")\n</pre> dpl.plot(ca533, type=\"seg\") dpl.plot(ca533, type=\"spag\") In\u00a0[5]: Copied! <pre>ca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=True)\nprint(ca533_rwi)\n</pre> ca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=True) print(ca533_rwi) <pre>        CAM011    CAM021    CAM031    CAM032    CAM041    CAM042    CAM051  \\\n626        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n627        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n628        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n629        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n630        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n...        ...       ...       ...       ...       ...       ...       ...   \n1979  0.995480  1.035034  0.478701  1.041036  1.214757  1.190700  1.426840   \n1980  1.118069  1.451645  1.115436  1.138915  1.759442  1.543335  2.057217   \n1981  1.190643  1.400192  0.998177  0.931251  1.222604  1.325723  1.830926   \n1982  1.163922  1.226275  1.097936  1.197448  1.635310  1.392638  1.432203   \n1983  1.681208  1.395723  0.764619  0.974378  1.853490  1.388557  1.261920   \n\n        CAM061    CAM062    CAM071  ...  CAM151  CAM152  CAM161  CAM162  \\\n626        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n627        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n628        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n629        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n630        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n...        ...       ...       ...  ...     ...     ...     ...     ...   \n1979  0.897468  1.399924  0.504710  ...     NaN     NaN     NaN     NaN   \n1980  1.474113  1.713195  0.642137  ...     NaN     NaN     NaN     NaN   \n1981  1.367015  1.230242  1.237981  ...     NaN     NaN     NaN     NaN   \n1982  1.430803  1.374571  1.375062  ...     NaN     NaN     NaN     NaN   \n1983  1.494565  0.892002  1.466229  ...     NaN     NaN     NaN     NaN   \n\n      CAM171  CAM172  CAM181  CAM191  CAM201    CAM211  \n626      NaN     NaN     NaN     NaN     NaN  0.371605  \n627      NaN     NaN     NaN     NaN     NaN  0.284398  \n628      NaN     NaN     NaN     NaN     NaN  0.306523  \n629      NaN     NaN     NaN     NaN     NaN  0.416333  \n630      NaN     NaN     NaN     NaN     NaN  0.482462  \n...      ...     ...     ...     ...     ...       ...  \n1979     NaN     NaN     NaN     NaN     NaN       NaN  \n1980     NaN     NaN     NaN     NaN     NaN       NaN  \n1981     NaN     NaN     NaN     NaN     NaN       NaN  \n1982     NaN     NaN     NaN     NaN     NaN       NaN  \n1983     NaN     NaN     NaN     NaN     NaN       NaN  \n\n[1358 rows x 34 columns]\n</pre> In\u00a0[6]: Copied! <pre>ca533_crn = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True)\nprint(ca533_crn)\n</pre> ca533_crn = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True) print(ca533_crn) <pre>      Mean RWI  Mean Res  Sample depth\nYear                                  \n626   0.371605       NaN             1\n627   0.284398       NaN             1\n628   0.306523       NaN             1\n629   0.416333       NaN             1\n630   0.482462       NaN             1\n...        ...       ...           ...\n1979  1.053427  0.975424            21\n1980  1.455353  1.394603            21\n1981  1.252526  1.023029            21\n1982  1.362244  1.178407            21\n1983  1.314827  1.108811            21\n\n[1358 rows x 3 columns]\n</pre> In\u00a0[9]: Copied! <pre>ca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=True)\nprint(ca533_rwi)\n</pre> ca533_rwi = dpl.detrend(ca533, fit=\"spline\", method=\"residual\", plot=True) print(ca533_rwi) <pre>Flags for CAM011\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1920-1959   -8 -0.12 -0.35  0.28 -0.14  0.19 -0.27 -0.07 -0.10  0.03  0.02  0.22 -0.21  0.01 -0.15  0.19  0.10  0.20  0.11 -0.27  0.20 -0.12\n   1940-1979   -8  0.03 -0.07  0.24 -0.19  0.01 -0.04  0.11 -0.15  0.14  0.03  0.22 -0.12 -0.22 -0.28  0.15                                    \n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1900-1939    6 -0.03 -0.31  0.06 -0.17  0.01 -0.24 -0.07  0.10 -0.21  0.19  0.14 -0.09  0.00  0.13  0.09 -0.01  0.28  0.28 -0.22  0.12 -0.07\n\nFlags for CAM031\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1780-1819    8 -0.20  0.16 -0.09 -0.19 -0.11  0.16  0.13  0.04 -0.05  0.08  0.31 -0.01 -0.08 -0.07 -0.05  0.00 -0.33 -0.14  0.45  0.05 -0.04\n   1800-1839    8  0.01  0.00 -0.14  0.21  0.05  0.12  0.15 -0.08  0.03 -0.15  0.27  0.07  0.34  0.03 -0.05 -0.07 -0.21 -0.05  0.35  0.26 -0.06\n\nFlags for CAM051\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1400-1439   -8 -0.22 -0.10  0.26  0.19 -0.27  0.01  0.22  0.10 -0.24 -0.10  0.20 -0.05 -0.15  0.21  0.19  0.01 -0.10 -0.09  0.03  0.17 -0.07\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1380-1419    3  0.00 -0.31  0.24  0.04 -0.12  0.08  0.29  0.12 -0.07 -0.09  0.05 -0.00 -0.10  0.42 -0.07 -0.22  0.04  0.15 -0.15  0.39 -0.02\n   1860-1899   -4 -0.07  0.09 -0.11  0.01  0.25  0.00  0.44  0.01 -0.17 -0.08  0.31 -0.16  0.07 -0.12 -0.22  0.03  0.11 -0.29 -0.16  0.19  0.00\n\nFlags for CAM081\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1920-1959   -7 -0.03 -0.24 -0.08  0.46 -0.19  0.18  0.02 -0.04 -0.09 -0.05  0.33  0.04  0.02 -0.15 -0.18  0.35  0.12 -0.03  0.07 -0.25  0.06\n\nFlags for CAM082\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1940-1979    1  0.04 -0.01 -0.03  0.02 -0.02  0.11 -0.25 -0.18 -0.15  0.02  0.28  0.42 -0.04 -0.11 -0.01                                    \n\nFlags for CAM092\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1700-1739    9 -0.03 -0.02  0.18  0.20  0.22  0.05  0.01  0.07  0.35 -0.20  0.50 -0.01  0.28 -0.10 -0.05  0.08  0.25 -0.17 -0.10  0.58 -0.42\n\nFlags for CAM131\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1800-1839    0 -0.06 -0.10 -0.06  0.01  0.18 -0.07 -0.14 -0.20 -0.10 -0.18  0.22 -0.16  0.11 -0.16 -0.03 -0.34  0.10 -0.15  0.12 -0.16  0.07\n   1820-1859    0 -0.15  0.10 -0.09 -0.13  0.12  0.05  0.01 -0.06  0.03 -0.01  0.23  0.07  0.18 -0.08  0.11 -0.46 -0.09  0.18  0.17 -0.03 -0.25\n\nFlags for CAM161\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1340-1379    6  0.04 -0.00  0.19 -0.15  0.00 -0.10 -0.02  0.10  0.24  0.09  0.20  0.12 -0.03 -0.22 -0.08  0.12  0.29 -0.12 -0.20  0.12  0.26\n   1480-1519    1 -0.11  0.20  0.03 -0.10 -0.07  0.16  0.22 -0.12 -0.18 -0.00  0.09  0.32 -0.21  0.13 -0.02  0.16 -0.09 -0.09  0.01  0.21 -0.11\n\nFlags for CAM162\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1340-1379   -2  0.11 -0.18 -0.03 -0.24  0.12 -0.22  0.19  0.11  0.29  0.15  0.22 -0.30  0.13 -0.16  0.00 -0.31 -0.17 -0.02  0.01  0.21 -0.06\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1620-1659   -2 -0.01  0.20  0.27 -0.31  0.17 -0.17 -0.21  0.18  0.28 -0.08  0.16 -0.25  0.10  0.14 -0.17  0.03  0.04  0.08 -0.02 -0.30 -0.27\n\nFlags for CAM181\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1780-1819    8 -0.14  0.02 -0.00 -0.07 -0.19  0.18  0.08 -0.42 -0.28  0.03  0.17  0.05 -0.07  0.17  0.07 -0.05  0.09  0.01  0.30  0.03 -0.12\n\nFlags for CAM201\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1120-1159    1 -0.08 -0.11 -0.18 -0.12 -0.12  0.04  0.02 -0.05  0.21 -0.15  0.39  0.54  0.02 -0.09  0.06 -0.19 -0.24  0.07 -0.30 -0.10 -0.28\n   1340-1379   -1 -0.05 -0.04  0.05  0.07 -0.05 -0.11 -0.20 -0.00 -0.09  0.26  0.11  0.20 -0.01  0.21 -0.12 -0.03 -0.40 -0.04 -0.20 -0.11 -0.05\n   1360-1399   -1 -0.03  0.01 -0.04  0.22 -0.04  0.01 -0.12 -0.02  0.05  0.30  0.21  0.29 -0.18  0.15  0.09 -0.06 -0.16  0.14 -0.09 -0.03  0.29\n\nFlags for CAM211\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1020-1059   -1 -0.09 -0.02  0.06  0.20  0.03 -0.15 -0.34 -0.32  0.15  0.79  0.10 -0.30 -0.07  0.09  0.10 -0.21 -0.35 -0.23  0.01  0.14  0.21\n   1040-1079   -1  0.11 -0.18 -0.15 -0.16 -0.20 -0.00 -0.10 -0.17  0.04  0.59  0.41 -0.03 -0.05 -0.02 -0.07 -0.33 -0.24 -0.14 -0.05  0.15  0.21\n   1340-1379   -1  0.05 -0.11  0.10  0.12 -0.15 -0.13 -0.23  0.14  0.01  0.29  0.21  0.21 -0.37  0.10 -0.20 -0.20 -0.01 -0.10  0.17 -0.08 -0.05\n   1620-1659    1 -0.17 -0.05  0.25 -0.15  0.03  0.08 -0.25 -0.09  0.16 -0.17  0.27  0.38  0.02 -0.08  0.19 -0.04  0.04  0.05 -0.15 -0.07 -0.33\n\n\n</pre> <pre>        CAM011    CAM021    CAM031    CAM032    CAM041    CAM042    CAM051  \\\n626        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n627        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n628        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n629        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n630        NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n...        ...       ...       ...       ...       ...       ...       ...   \n1979  0.995480  1.035034  0.478701  1.041036  1.214757  1.190700  1.426840   \n1980  1.118069  1.451645  1.115436  1.138915  1.759442  1.543335  2.057217   \n1981  1.190643  1.400192  0.998177  0.931251  1.222604  1.325723  1.830926   \n1982  1.163922  1.226275  1.097936  1.197448  1.635310  1.392638  1.432203   \n1983  1.681208  1.395723  0.764619  0.974378  1.853490  1.388557  1.261920   \n\n        CAM061    CAM062    CAM071  ...  CAM151  CAM152  CAM161  CAM162  \\\n626        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n627        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n628        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n629        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n630        NaN       NaN       NaN  ...     NaN     NaN     NaN     NaN   \n...        ...       ...       ...  ...     ...     ...     ...     ...   \n1979  0.897468  1.399924  0.504710  ...     NaN     NaN     NaN     NaN   \n1980  1.474113  1.713195  0.642137  ...     NaN     NaN     NaN     NaN   \n1981  1.367015  1.230242  1.237981  ...     NaN     NaN     NaN     NaN   \n1982  1.430803  1.374571  1.375062  ...     NaN     NaN     NaN     NaN   \n1983  1.494565  0.892002  1.466229  ...     NaN     NaN     NaN     NaN   \n\n      CAM171  CAM172  CAM181  CAM191  CAM201    CAM211  \n626      NaN     NaN     NaN     NaN     NaN  0.371605  \n627      NaN     NaN     NaN     NaN     NaN  0.284398  \n628      NaN     NaN     NaN     NaN     NaN  0.306523  \n629      NaN     NaN     NaN     NaN     NaN  0.416333  \n630      NaN     NaN     NaN     NaN     NaN  0.482462  \n...      ...     ...     ...     ...     ...       ...  \n1979     NaN     NaN     NaN     NaN     NaN       NaN  \n1980     NaN     NaN     NaN     NaN     NaN       NaN  \n1981     NaN     NaN     NaN     NaN     NaN       NaN  \n1982     NaN     NaN     NaN     NaN     NaN       NaN  \n1983     NaN     NaN     NaN     NaN     NaN       NaN  \n\n[1358 rows x 34 columns]\n</pre> In\u00a0[6]: Copied! <pre>ca533_crn = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True)\nprint(ca533_crn)\n</pre> ca533_crn = dpl.chron(ca533_rwi, biweight=True, prewhiten=True, plot=True) print(ca533_crn) <pre>      Mean RWI  Mean Res  Sample depth\nYear                                  \n626   0.371605       NaN             1\n627   0.284398       NaN             1\n628   0.306523       NaN             1\n629   0.416333       NaN             1\n630   0.482462       NaN             1\n...        ...       ...           ...\n1979  1.053427  0.975424            21\n1980  1.455353  1.394603            21\n1981  1.252526  1.023029            21\n1982  1.362244  1.178407            21\n1983  1.314827  1.108811            21\n\n[1358 rows x 3 columns]\n</pre> In\u00a0[9]: Copied! <pre>dpl.xdate(ca533_rwi, prewhiten=True, corr=\"Spearman\", slide_period=40, bin_floor=100, p_val=0.05, show_flags=True)\n</pre> dpl.xdate(ca533_rwi, prewhiten=True, corr=\"Spearman\", slide_period=40, bin_floor=100, p_val=0.05, show_flags=True) <pre>Flags for CAM011\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1920-1959   -8 -0.12 -0.35  0.28 -0.14  0.19 -0.27 -0.07 -0.10  0.03  0.02  0.22 -0.21  0.01 -0.15  0.19  0.10  0.20  0.11 -0.27  0.20 -0.12\n   1940-1979   -8  0.03 -0.07  0.24 -0.19  0.01 -0.04  0.11 -0.15  0.14  0.03  0.22 -0.12 -0.22 -0.28  0.15                                    \n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1900-1939    6 -0.03 -0.31  0.06 -0.17  0.01 -0.24 -0.07  0.10 -0.21  0.19  0.14 -0.09  0.00  0.13  0.09 -0.01  0.28  0.28 -0.22  0.12 -0.07\n\nFlags for CAM031\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1780-1819    8 -0.20  0.16 -0.09 -0.19 -0.11  0.16  0.13  0.04 -0.05  0.08  0.31 -0.01 -0.08 -0.07 -0.05  0.00 -0.33 -0.14  0.45  0.05 -0.04\n   1800-1839    8  0.01  0.00 -0.14  0.21  0.05  0.12  0.15 -0.08  0.03 -0.15  0.27  0.07  0.34  0.03 -0.05 -0.07 -0.21 -0.05  0.35  0.26 -0.06\n\nFlags for CAM051\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1400-1439   -8 -0.22 -0.10  0.26  0.19 -0.27  0.01  0.22  0.10 -0.24 -0.10  0.20 -0.05 -0.15  0.21  0.19  0.01 -0.10 -0.09  0.03  0.17 -0.07\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1380-1419    3  0.00 -0.31  0.24  0.04 -0.12  0.08  0.29  0.12 -0.07 -0.09  0.05 -0.00 -0.10  0.42 -0.07 -0.22  0.04  0.15 -0.15  0.39 -0.02\n   1860-1899   -4 -0.07  0.09 -0.11  0.01  0.25  0.00  0.44  0.01 -0.17 -0.08  0.31 -0.16  0.07 -0.12 -0.22  0.03  0.11 -0.29 -0.16  0.19  0.00\n\nFlags for CAM081\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1920-1959   -7 -0.03 -0.24 -0.08  0.46 -0.19  0.18  0.02 -0.04 -0.09 -0.05  0.33  0.04  0.02 -0.15 -0.18  0.35  0.12 -0.03  0.07 -0.25  0.06\n\nFlags for CAM082\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1940-1979    1  0.04 -0.01 -0.03  0.02 -0.02  0.11 -0.25 -0.18 -0.15  0.02  0.28  0.42 -0.04 -0.11 -0.01                                    \n\nFlags for CAM092\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1700-1739    9 -0.03 -0.02  0.18  0.20  0.22  0.05  0.01  0.07  0.35 -0.20  0.50 -0.01  0.28 -0.10 -0.05  0.08  0.25 -0.17 -0.10  0.58 -0.42\n\nFlags for CAM131\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1800-1839    0 -0.06 -0.10 -0.06  0.01  0.18 -0.07 -0.14 -0.20 -0.10 -0.18  0.22 -0.16  0.11 -0.16 -0.03 -0.34  0.10 -0.15  0.12 -0.16  0.07\n   1820-1859    0 -0.15  0.10 -0.09 -0.13  0.12  0.05  0.01 -0.06  0.03 -0.01  0.23  0.07  0.18 -0.08  0.11 -0.46 -0.09  0.18  0.17 -0.03 -0.25\n\nFlags for CAM161\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1340-1379    6  0.04 -0.00  0.19 -0.15  0.00 -0.10 -0.02  0.10  0.24  0.09  0.20  0.12 -0.03 -0.22 -0.08  0.12  0.29 -0.12 -0.20  0.12  0.26\n   1480-1519    1 -0.11  0.20  0.03 -0.10 -0.07  0.16  0.22 -0.12 -0.18 -0.00  0.09  0.32 -0.21  0.13 -0.02  0.16 -0.09 -0.09  0.01  0.21 -0.11\n\nFlags for CAM162\n[A] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1340-1379   -2  0.11 -0.18 -0.03 -0.24  0.12 -0.22  0.19  0.11  0.29  0.15  0.22 -0.30  0.13 -0.16  0.00 -0.31 -0.17 -0.02  0.01  0.21 -0.06\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1620-1659   -2 -0.01  0.20  0.27 -0.31  0.17 -0.17 -0.21  0.18  0.28 -0.08  0.16 -0.25  0.10  0.14 -0.17  0.03  0.04  0.08 -0.02 -0.30 -0.27\n\nFlags for CAM181\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1780-1819    8 -0.14  0.02 -0.00 -0.07 -0.19  0.18  0.08 -0.42 -0.28  0.03  0.17  0.05 -0.07  0.17  0.07 -0.05  0.09  0.01  0.30  0.03 -0.12\n\nFlags for CAM201\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1120-1159    1 -0.08 -0.11 -0.18 -0.12 -0.12  0.04  0.02 -0.05  0.21 -0.15  0.39  0.54  0.02 -0.09  0.06 -0.19 -0.24  0.07 -0.30 -0.10 -0.28\n   1340-1379   -1 -0.05 -0.04  0.05  0.07 -0.05 -0.11 -0.20 -0.00 -0.09  0.26  0.11  0.20 -0.01  0.21 -0.12 -0.03 -0.40 -0.04 -0.20 -0.11 -0.05\n   1360-1399   -1 -0.03  0.01 -0.04  0.22 -0.04  0.01 -0.12 -0.02  0.05  0.30  0.21  0.29 -0.18  0.15  0.09 -0.06 -0.16  0.14 -0.09 -0.03  0.29\n\nFlags for CAM211\n[B] Segment  High   -10    -9    -8    -7    -6    -5    -4    -3    -2    -1     0    +1    +2    +3    +4    +5    +6    +7    +8    +9   +10\n   1020-1059   -1 -0.09 -0.02  0.06  0.20  0.03 -0.15 -0.34 -0.32  0.15  0.79  0.10 -0.30 -0.07  0.09  0.10 -0.21 -0.35 -0.23  0.01  0.14  0.21\n   1040-1079   -1  0.11 -0.18 -0.15 -0.16 -0.20 -0.00 -0.10 -0.17  0.04  0.59  0.41 -0.03 -0.05 -0.02 -0.07 -0.33 -0.24 -0.14 -0.05  0.15  0.21\n   1340-1379   -1  0.05 -0.11  0.10  0.12 -0.15 -0.13 -0.23  0.14  0.01  0.29  0.21  0.21 -0.37  0.10 -0.20 -0.20 -0.01 -0.10  0.17 -0.08 -0.05\n   1620-1659    1 -0.17 -0.05  0.25 -0.15  0.03  0.08 -0.25 -0.09  0.16 -0.17  0.27  0.38  0.02 -0.08  0.19 -0.04  0.04  0.05 -0.15 -0.07 -0.33\n\n\n</pre> Out[9]: CAM011 CAM021 CAM031 CAM032 CAM041 CAM042 CAM051 CAM061 CAM062 CAM071 ... CAM151 CAM152 CAM161 CAM162 CAM171 CAM172 CAM181 CAM191 CAM201 CAM211 700-739 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.308818 720-759 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.476360 740-779 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.360788 760-799 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.284053 780-819 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.518949 ... ... NaN NaN NaN NaN NaN NaN NaN NaN NaN 0.317647 1860-1899 0.492308 0.703565 0.608443 0.708443 0.617824 0.631895 0.313884 0.818386 0.782364 0.627767 ... 0.738274 NaN NaN 0.570169 0.479925 0.651220 0.501501 0.702627 NaN 0.709193 1880-1919 0.300000 0.769043 0.581426 0.695685 0.559662 0.742026 0.475797 0.727205 0.767917 0.621764 ... 0.724390 NaN NaN 0.753846 0.566979 0.675422 0.612758 0.702251 NaN 0.717448 1900-1939 0.141276 0.685553 0.648405 0.631520 0.458724 0.697749 0.407692 0.645216 0.667167 0.472983 ... 0.751407 NaN NaN 0.608255 0.556848 0.714447 0.474859 0.672233 NaN 0.620263 1920-1959 0.218386 0.596998 0.561351 0.656660 0.357786 0.643902 0.304878 0.657411 0.751595 0.464353 ... 0.571670 NaN NaN 0.421201 0.442777 0.696623 0.367917 0.660788 NaN 0.534334 1940-1979 0.218386 0.653096 0.463227 0.594934 0.534334 0.559099 0.387805 0.618574 0.784991 0.584615 ... NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN <p>63 rows \u00d7 34 columns</p> In\u00a0[13]: Copied! <pre>dpl.writers(ca533_crn, \"CA533\", \"crn\")\n</pre> dpl.writers(ca533_crn, \"CA533\", \"crn\") <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nInput In [13], in &lt;cell line: 1&gt;()\n----&gt; 1 dpl.writers(ca533_crn, \"CA533\", \"crn\")\n\nAttributeError: module 'dplpy' has no attribute 'writers'</pre> In\u00a0[4]: Copied! <pre>dpl.series_corr(ca533_rwi, \"CAM181\", prewhiten=True, corr=\"Spearman\", seg_length=60, bin_floor=60, p_val=0.05, plot=True)\n</pre> dpl.series_corr(ca533_rwi, \"CAM181\", prewhiten=True, corr=\"Spearman\", seg_length=60, bin_floor=60, p_val=0.05, plot=True) <pre>&lt;Figure size 432x288 with 0 Axes&gt;</pre> In\u00a0[11]: Copied! <pre>start, end = dpl.common_interval(ca533_rwi)\nprint(start, end)\nca533_crn2 = ca533_crn.loc[start:end, :].copy()\nprint(ca533_crn2)\nca533_rbar = dpl.rbar(ca533_rwi, start, end, method=\"osborn\")\nnEff = (ca533_crn2['Sample depth'])/ (1 + ((ca533_crn2['Sample depth'] - 1) * ca533_rbar))\nca533_crn2['Mean RWI'] = ca533_crn2['Mean RWI'] * nEff\nprint(ca533_crn2)\n</pre> start, end = dpl.common_interval(ca533_rwi) print(start, end) ca533_crn2 = ca533_crn.loc[start:end, :].copy() print(ca533_crn2) ca533_rbar = dpl.rbar(ca533_rwi, start, end, method=\"osborn\") nEff = (ca533_crn2['Sample depth'])/ (1 + ((ca533_crn2['Sample depth'] - 1) * ca533_rbar)) ca533_crn2['Mean RWI'] = ca533_crn2['Mean RWI'] * nEff print(ca533_crn2) <pre>1247 1982\n      Mean RWI  Mean Res  Sample depth\nYear                                  \n1247  0.935817  1.005539            19\n1248  1.365374  1.359648            19\n1249  1.271459  1.097758            19\n1250  1.120363  0.973166            19\n1251  1.063708  0.984602            19\n...        ...       ...           ...\n1978  1.132682  1.010618            21\n1979  1.053427  0.975424            21\n1980  1.455353  1.394603            21\n1981  1.252526  1.023029            21\n1982  1.362244  1.178407            21\n\n[736 rows x 3 columns]\n      Mean RWI  Mean Res  Sample depth\nYear                                  \n1247  1.986489  1.005539            19\n1248  2.898322  1.359648            19\n1249  2.698966  1.097758            19\n1250  2.378230  0.973166            19\n1251  2.257966  0.984602            19\n...        ...       ...           ...\n1978  2.418748  1.010618            21\n1979  2.249506  0.975424            21\n1980  3.107785  1.394603            21\n1981  2.674665  1.023029            21\n1982  2.908960  1.178407            21\n\n[736 rows x 3 columns]\n</pre>"}]}